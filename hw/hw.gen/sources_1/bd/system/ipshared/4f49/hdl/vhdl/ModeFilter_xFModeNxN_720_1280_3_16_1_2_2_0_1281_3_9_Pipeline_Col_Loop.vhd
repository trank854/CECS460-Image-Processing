-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ModeFilter_xFModeNxN_720_1280_3_16_1_2_2_0_1281_3_9_Pipeline_Col_Loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img0_data_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    img0_data_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    img0_data_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    img0_data_empty_n : IN STD_LOGIC;
    img0_data_read : OUT STD_LOGIC;
    img1_data_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    img1_data_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    img1_data_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    img1_data_full_n : IN STD_LOGIC;
    img1_data_write : OUT STD_LOGIC;
    add_ln446 : IN STD_LOGIC_VECTOR (11 downto 0);
    buf_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buf_2_ce0 : OUT STD_LOGIC;
    buf_2_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    buf_2_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buf_2_ce1 : OUT STD_LOGIC;
    buf_2_we1 : OUT STD_LOGIC;
    buf_2_d1 : OUT STD_LOGIC_VECTOR (23 downto 0);
    buf_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buf_r_ce0 : OUT STD_LOGIC;
    buf_r_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    buf_r_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buf_r_ce1 : OUT STD_LOGIC;
    buf_r_we1 : OUT STD_LOGIC;
    buf_r_d1 : OUT STD_LOGIC_VECTOR (23 downto 0);
    buf_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buf_1_ce0 : OUT STD_LOGIC;
    buf_1_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    buf_1_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    buf_1_ce1 : OUT STD_LOGIC;
    buf_1_we1 : OUT STD_LOGIC;
    buf_1_d1 : OUT STD_LOGIC_VECTOR (23 downto 0);
    row_ind_9 : IN STD_LOGIC_VECTOR (1 downto 0);
    row_ind_8 : IN STD_LOGIC_VECTOR (1 downto 0);
    row_ind_7 : IN STD_LOGIC_VECTOR (1 downto 0);
    sub_i213_i_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    spec_select47 : IN STD_LOGIC_VECTOR (0 downto 0);
    spec_select51 : IN STD_LOGIC_VECTOR (0 downto 0);
    spec_select55 : IN STD_LOGIC_VECTOR (0 downto 0);
    zext_ln415_2 : IN STD_LOGIC_VECTOR (10 downto 0);
    cmp_i_i321_i : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of ModeFilter_xFModeNxN_720_1280_3_16_1_2_2_0_1281_3_9_Pipeline_Col_Loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln178_reg_641 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln185_reg_652 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op58_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal icmp_ln178_reg_641_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln333_reg_671 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln333_reg_671_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op119_write_state12 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln178_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal img0_data_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal img1_data_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal row_ind_9_read_reg_628 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_reg_634 : STD_LOGIC_VECTOR (11 downto 0);
    signal col_reg_634_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln178_reg_641_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln178_reg_641_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln178_reg_641_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln178_reg_641_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln178_reg_641_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln178_reg_641_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln178_reg_641_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln178_reg_641_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln178_reg_641_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_645 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_645_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_645_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln185_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln333_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln333_reg_671_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln333_reg_671_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln333_reg_671_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln333_reg_671_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln333_reg_671_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln333_reg_671_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln333_reg_671_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal src_buf_12_reg_677 : STD_LOGIC_VECTOR (23 downto 0);
    signal src_buf_3_load_1_reg_683 : STD_LOGIC_VECTOR (23 downto 0);
    signal src_buf_5_load_1_reg_688 : STD_LOGIC_VECTOR (23 downto 0);
    signal src_buf_17_fu_466_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal src_buf_17_reg_693 : STD_LOGIC_VECTOR (23 downto 0);
    signal src_buf_15_fu_473_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal src_buf_15_reg_699 : STD_LOGIC_VECTOR (23 downto 0);
    signal src_buf_13_fu_480_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal src_buf_13_reg_705 : STD_LOGIC_VECTOR (23 downto 0);
    signal src_buf_3_load_reg_711 : STD_LOGIC_VECTOR (23 downto 0);
    signal src_buf_5_load_reg_716 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_xFModeProc_3_1_16_3_9_s_fu_282_ap_return : STD_LOGIC_VECTOR (23 downto 0);
    signal OutputValues_reg_736 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_condition_exit_pp0_iter3_stage0 : STD_LOGIC;
    signal grp_xFModeProc_3_1_16_3_9_s_fu_282_ap_ce : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call23 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_ignore_call23 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2_ignore_call23 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3_ignore_call23 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4_ignore_call23 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5_ignore_call23 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6_ignore_call23 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7_ignore_call23 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8_ignore_call23 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9_ignore_call23 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10_ignore_call23 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11_ignore_call23 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp105 : BOOLEAN;
    signal ap_phi_reg_pp0_iter0_src_buf_6_reg_273 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_phi_reg_pp0_iter1_src_buf_6_reg_273 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_phi_reg_pp0_iter2_src_buf_6_reg_273 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_phi_reg_pp0_iter3_src_buf_6_reg_273 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_phi_reg_pp0_iter4_src_buf_6_reg_273 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln186_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i130_i_fu_372_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal col_4_fu_94 : STD_LOGIC_VECTOR (11 downto 0);
    signal col_5_fu_343_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_col : STD_LOGIC_VECTOR (11 downto 0);
    signal src_buf_fu_98 : STD_LOGIC_VECTOR (23 downto 0);
    signal src_buf_2_fu_102 : STD_LOGIC_VECTOR (23 downto 0);
    signal src_buf_14_fu_525_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal src_buf_3_fu_106 : STD_LOGIC_VECTOR (23 downto 0);
    signal src_buf_4_fu_110 : STD_LOGIC_VECTOR (23 downto 0);
    signal src_buf_16_fu_520_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal src_buf_5_fu_114 : STD_LOGIC_VECTOR (23 downto 0);
    signal src_buf_1_fu_118 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln415_2_cast_fu_295_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln_fu_392_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_21_fu_400_p5 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_22_fu_412_p5 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_s_fu_430_p5 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_23_fu_448_p5 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_0_0_0428_258_fu_459_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_0_0_0428_157_fu_441_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_0_0_042856_fu_423_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ModeFilter_xFModeProc_3_1_16_3_9_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        src_buf_0_0_val : IN STD_LOGIC_VECTOR (23 downto 0);
        src_buf_0_1_val : IN STD_LOGIC_VECTOR (23 downto 0);
        src_buf_0_2_val : IN STD_LOGIC_VECTOR (23 downto 0);
        src_buf_1_0_val : IN STD_LOGIC_VECTOR (23 downto 0);
        src_buf_1_1_val : IN STD_LOGIC_VECTOR (23 downto 0);
        src_buf_1_2_val : IN STD_LOGIC_VECTOR (23 downto 0);
        src_buf_2_0_val : IN STD_LOGIC_VECTOR (23 downto 0);
        src_buf_2_1_val : IN STD_LOGIC_VECTOR (23 downto 0);
        src_buf_2_2_val : IN STD_LOGIC_VECTOR (23 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component ModeFilter_mux_3_2_2_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        din2 : IN STD_LOGIC_VECTOR (1 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component ModeFilter_mux_3_2_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component ModeFilter_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    grp_xFModeProc_3_1_16_3_9_s_fu_282 : component ModeFilter_xFModeProc_3_1_16_3_9_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        src_buf_0_0_val => src_buf_fu_98,
        src_buf_0_1_val => src_buf_12_reg_677,
        src_buf_0_2_val => src_buf_13_reg_705,
        src_buf_1_0_val => src_buf_2_fu_102,
        src_buf_1_1_val => src_buf_3_load_1_reg_683,
        src_buf_1_2_val => src_buf_15_reg_699,
        src_buf_2_0_val => src_buf_4_fu_110,
        src_buf_2_1_val => src_buf_5_load_1_reg_688,
        src_buf_2_2_val => src_buf_17_reg_693,
        ap_return => grp_xFModeProc_3_1_16_3_9_s_fu_282_ap_return,
        ap_ce => grp_xFModeProc_3_1_16_3_9_s_fu_282_ap_ce);

    mux_3_2_2_1_1_U81 : component ModeFilter_mux_3_2_2_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 2,
        din2_WIDTH => 2,
        din3_WIDTH => 2,
        dout_WIDTH => 2)
    port map (
        din0 => row_ind_7,
        din1 => row_ind_8,
        din2 => row_ind_9,
        din3 => sub_i213_i_cast,
        dout => trunc_ln_fu_392_p5);

    mux_3_2_24_1_1_U82 : component ModeFilter_mux_3_2_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 2,
        dout_WIDTH => 24)
    port map (
        din0 => buf_r_q0,
        din1 => buf_1_q0,
        din2 => buf_2_q0,
        din3 => trunc_ln_fu_392_p5,
        dout => tmp_21_fu_400_p5);

    mux_3_2_24_1_1_U83 : component ModeFilter_mux_3_2_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 2,
        dout_WIDTH => 24)
    port map (
        din0 => buf_r_q0,
        din1 => buf_1_q0,
        din2 => buf_2_q0,
        din3 => row_ind_7,
        dout => tmp_22_fu_412_p5);

    mux_3_2_24_1_1_U84 : component ModeFilter_mux_3_2_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 2,
        dout_WIDTH => 24)
    port map (
        din0 => buf_r_q0,
        din1 => buf_1_q0,
        din2 => buf_2_q0,
        din3 => row_ind_8,
        dout => tmp_s_fu_430_p5);

    mux_3_2_24_1_1_U85 : component ModeFilter_mux_3_2_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 2,
        dout_WIDTH => 24)
    port map (
        din0 => buf_r_q0,
        din1 => buf_1_q0,
        din2 => buf_2_q0,
        din3 => row_ind_9,
        dout => tmp_23_fu_448_p5);

    flow_control_loop_pipe_sequential_init_U : component ModeFilter_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter4_src_buf_6_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln333_reg_671 = ap_const_lv1_1) and (icmp_ln178_reg_641_pp0_iter2_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter4_src_buf_6_reg_273 <= src_buf_13_fu_480_p3;
                elsif (((icmp_ln333_reg_671 = ap_const_lv1_0) and (icmp_ln178_reg_641_pp0_iter2_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter4_src_buf_6_reg_273 <= src_buf_1_fu_118;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter4_src_buf_6_reg_273 <= ap_phi_reg_pp0_iter3_src_buf_6_reg_273;
                end if;
            end if; 
        end if;
    end process;

    col_4_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln178_fu_337_p2 = ap_const_lv1_0))) then 
                    col_4_fu_94 <= col_5_fu_343_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    col_4_fu_94 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    src_buf_1_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    src_buf_1_fu_118 <= ap_const_lv24_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln178_reg_641_pp0_iter2_reg = ap_const_lv1_0))) then 
                    src_buf_1_fu_118 <= src_buf_13_fu_480_p3;
                end if;
            end if; 
        end if;
    end process;

    src_buf_2_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    src_buf_2_fu_102 <= ap_const_lv24_0;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    src_buf_2_fu_102 <= src_buf_14_fu_525_p3;
                end if;
            end if; 
        end if;
    end process;

    src_buf_3_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    src_buf_3_fu_106 <= ap_const_lv24_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln178_reg_641_pp0_iter2_reg = ap_const_lv1_0))) then 
                    src_buf_3_fu_106 <= src_buf_15_fu_473_p3;
                end if;
            end if; 
        end if;
    end process;

    src_buf_4_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    src_buf_4_fu_110 <= ap_const_lv24_0;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    src_buf_4_fu_110 <= src_buf_16_fu_520_p3;
                end if;
            end if; 
        end if;
    end process;

    src_buf_5_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    src_buf_5_fu_114 <= ap_const_lv24_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln178_reg_641_pp0_iter2_reg = ap_const_lv1_0))) then 
                    src_buf_5_fu_114 <= src_buf_17_fu_466_p3;
                end if;
            end if; 
        end if;
    end process;

    src_buf_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    src_buf_fu_98 <= ap_const_lv24_0;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    src_buf_fu_98 <= ap_phi_reg_pp0_iter4_src_buf_6_reg_273;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln178_reg_641_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                OutputValues_reg_736 <= grp_xFModeProc_3_1_16_3_9_s_fu_282_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln178_fu_337_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln185_reg_652 <= and_ln185_fu_355_p2;
                icmp_ln185_reg_645 <= icmp_ln185_fu_349_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln178_reg_641_pp0_iter10_reg <= icmp_ln178_reg_641_pp0_iter9_reg;
                icmp_ln178_reg_641_pp0_iter2_reg <= icmp_ln178_reg_641_pp0_iter1_reg;
                icmp_ln178_reg_641_pp0_iter3_reg <= icmp_ln178_reg_641_pp0_iter2_reg;
                icmp_ln178_reg_641_pp0_iter4_reg <= icmp_ln178_reg_641_pp0_iter3_reg;
                icmp_ln178_reg_641_pp0_iter5_reg <= icmp_ln178_reg_641_pp0_iter4_reg;
                icmp_ln178_reg_641_pp0_iter6_reg <= icmp_ln178_reg_641_pp0_iter5_reg;
                icmp_ln178_reg_641_pp0_iter7_reg <= icmp_ln178_reg_641_pp0_iter6_reg;
                icmp_ln178_reg_641_pp0_iter8_reg <= icmp_ln178_reg_641_pp0_iter7_reg;
                icmp_ln178_reg_641_pp0_iter9_reg <= icmp_ln178_reg_641_pp0_iter8_reg;
                icmp_ln185_reg_645_pp0_iter2_reg <= icmp_ln185_reg_645_pp0_iter1_reg;
                icmp_ln333_reg_671_pp0_iter10_reg <= icmp_ln333_reg_671_pp0_iter9_reg;
                icmp_ln333_reg_671_pp0_iter3_reg <= icmp_ln333_reg_671;
                icmp_ln333_reg_671_pp0_iter4_reg <= icmp_ln333_reg_671_pp0_iter3_reg;
                icmp_ln333_reg_671_pp0_iter5_reg <= icmp_ln333_reg_671_pp0_iter4_reg;
                icmp_ln333_reg_671_pp0_iter6_reg <= icmp_ln333_reg_671_pp0_iter5_reg;
                icmp_ln333_reg_671_pp0_iter7_reg <= icmp_ln333_reg_671_pp0_iter6_reg;
                icmp_ln333_reg_671_pp0_iter8_reg <= icmp_ln333_reg_671_pp0_iter7_reg;
                icmp_ln333_reg_671_pp0_iter9_reg <= icmp_ln333_reg_671_pp0_iter8_reg;
                src_buf_12_reg_677 <= src_buf_1_fu_118;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                col_reg_634 <= ap_sig_allocacmp_col;
                col_reg_634_pp0_iter1_reg <= col_reg_634;
                icmp_ln178_reg_641 <= icmp_ln178_fu_337_p2;
                icmp_ln178_reg_641_pp0_iter1_reg <= icmp_ln178_reg_641;
                icmp_ln185_reg_645_pp0_iter1_reg <= icmp_ln185_reg_645;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter1_src_buf_6_reg_273 <= ap_phi_reg_pp0_iter0_src_buf_6_reg_273;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter2_src_buf_6_reg_273 <= ap_phi_reg_pp0_iter1_src_buf_6_reg_273;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter3_src_buf_6_reg_273 <= ap_phi_reg_pp0_iter2_src_buf_6_reg_273;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln178_reg_641_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln333_reg_671 <= icmp_ln333_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln178_reg_641_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                src_buf_13_reg_705 <= src_buf_13_fu_480_p3;
                src_buf_15_reg_699 <= src_buf_15_fu_473_p3;
                src_buf_17_reg_693 <= src_buf_17_fu_466_p3;
                src_buf_3_load_1_reg_683 <= src_buf_3_fu_106;
                src_buf_5_load_1_reg_688 <= src_buf_5_fu_114;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln333_reg_671 = ap_const_lv1_0) and (icmp_ln178_reg_641_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                src_buf_3_load_reg_711 <= src_buf_3_fu_106;
                src_buf_5_load_reg_716 <= src_buf_5_fu_114;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln185_fu_355_p2 <= (icmp_ln185_fu_349_p2 and cmp_i_i321_i);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter11, img0_data_empty_n, ap_predicate_op58_read_state2, img1_data_full_n, ap_predicate_op119_write_state12)
    begin
                ap_block_pp0_stage0_01001 <= (((img1_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_predicate_op119_write_state12 = ap_const_boolean_1)) or ((ap_predicate_op58_read_state2 = ap_const_boolean_1) and (img0_data_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter11, img0_data_empty_n, ap_predicate_op58_read_state2, img1_data_full_n, ap_predicate_op119_write_state12)
    begin
                ap_block_pp0_stage0_11001 <= (((img1_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_predicate_op119_write_state12 = ap_const_boolean_1)) or ((ap_predicate_op58_read_state2 = ap_const_boolean_1) and (img0_data_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp105_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter11, img0_data_empty_n, ap_predicate_op58_read_state2, img1_data_full_n, ap_predicate_op119_write_state12)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp105 <= (((img1_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_predicate_op119_write_state12 = ap_const_boolean_1)) or ((ap_predicate_op58_read_state2 = ap_const_boolean_1) and (img0_data_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter11, img0_data_empty_n, ap_predicate_op58_read_state2, img1_data_full_n, ap_predicate_op119_write_state12)
    begin
                ap_block_pp0_stage0_subdone <= (((img1_data_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_predicate_op119_write_state12 = ap_const_boolean_1)) or ((ap_predicate_op58_read_state2 = ap_const_boolean_1) and (img0_data_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_pp0_stage0_iter11_assign_proc : process(img1_data_full_n, ap_predicate_op119_write_state12)
    begin
                ap_block_state12_pp0_stage0_iter11 <= ((img1_data_full_n = ap_const_logic_0) and (ap_predicate_op119_write_state12 = ap_const_boolean_1));
    end process;


    ap_block_state12_pp0_stage0_iter11_ignore_call23_assign_proc : process(img1_data_full_n, ap_predicate_op119_write_state12)
    begin
                ap_block_state12_pp0_stage0_iter11_ignore_call23 <= ((img1_data_full_n = ap_const_logic_0) and (ap_predicate_op119_write_state12 = ap_const_boolean_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(img0_data_empty_n, ap_predicate_op58_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((ap_predicate_op58_read_state2 = ap_const_boolean_1) and (img0_data_empty_n = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage0_iter1_ignore_call23_assign_proc : process(img0_data_empty_n, ap_predicate_op58_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter1_ignore_call23 <= ((ap_predicate_op58_read_state2 = ap_const_boolean_1) and (img0_data_empty_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8_ignore_call23 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln178_fu_337_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln178_fu_337_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter3_stage0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, icmp_ln178_reg_641_pp0_iter2_reg)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln178_reg_641_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_phi_reg_pp0_iter0_src_buf_6_reg_273 <= "XXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op119_write_state12_assign_proc : process(icmp_ln178_reg_641_pp0_iter10_reg, icmp_ln333_reg_671_pp0_iter10_reg)
    begin
                ap_predicate_op119_write_state12 <= ((icmp_ln333_reg_671_pp0_iter10_reg = ap_const_lv1_0) and (icmp_ln178_reg_641_pp0_iter10_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op58_read_state2_assign_proc : process(icmp_ln178_reg_641, and_ln185_reg_652)
    begin
                ap_predicate_op58_read_state2 <= ((ap_const_lv1_1 = and_ln185_reg_652) and (icmp_ln178_reg_641 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_col_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, col_4_fu_94, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_col <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_col <= col_4_fu_94;
        end if; 
    end process;

    buf_1_address0 <= conv_i130_i_fu_372_p1(11 - 1 downto 0);
    buf_1_address1 <= zext_ln186_fu_366_p1(11 - 1 downto 0);

    buf_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_1_ce0 <= ap_const_logic_1;
        else 
            buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_1_ce1 <= ap_const_logic_1;
        else 
            buf_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_1_d1 <= img0_data_dout;

    buf_1_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln178_reg_641, and_ln185_reg_652, ap_block_pp0_stage0_11001, row_ind_9_read_reg_628)
    begin
        if (((ap_const_lv1_1 = and_ln185_reg_652) and (icmp_ln178_reg_641 = ap_const_lv1_0) and (row_ind_9_read_reg_628 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_1_we1 <= ap_const_logic_1;
        else 
            buf_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_2_address0 <= conv_i130_i_fu_372_p1(11 - 1 downto 0);
    buf_2_address1 <= zext_ln186_fu_366_p1(11 - 1 downto 0);

    buf_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_2_ce0 <= ap_const_logic_1;
        else 
            buf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_2_ce1 <= ap_const_logic_1;
        else 
            buf_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_2_d1 <= img0_data_dout;

    buf_2_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln178_reg_641, and_ln185_reg_652, ap_block_pp0_stage0_11001, row_ind_9_read_reg_628)
    begin
        if ((not((row_ind_9_read_reg_628 = ap_const_lv2_0)) and not((row_ind_9_read_reg_628 = ap_const_lv2_1)) and (ap_const_lv1_1 = and_ln185_reg_652) and (icmp_ln178_reg_641 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_2_we1 <= ap_const_logic_1;
        else 
            buf_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_r_address0 <= conv_i130_i_fu_372_p1(11 - 1 downto 0);
    buf_r_address1 <= zext_ln186_fu_366_p1(11 - 1 downto 0);

    buf_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_r_ce0 <= ap_const_logic_1;
        else 
            buf_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_r_ce1 <= ap_const_logic_1;
        else 
            buf_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_r_d1 <= img0_data_dout;

    buf_r_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln178_reg_641, and_ln185_reg_652, ap_block_pp0_stage0_11001, row_ind_9_read_reg_628)
    begin
        if (((ap_const_lv1_1 = and_ln185_reg_652) and (icmp_ln178_reg_641 = ap_const_lv1_0) and (row_ind_9_read_reg_628 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_r_we1 <= ap_const_logic_1;
        else 
            buf_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    col_5_fu_343_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_col) + unsigned(ap_const_lv12_1));
    conv_i130_i_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_reg_634_pp0_iter1_reg),64));

    grp_xFModeProc_3_1_16_3_9_s_fu_282_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp105)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp105))) then 
            grp_xFModeProc_3_1_16_3_9_s_fu_282_ap_ce <= ap_const_logic_1;
        else 
            grp_xFModeProc_3_1_16_3_9_s_fu_282_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln178_fu_337_p2 <= "1" when (ap_sig_allocacmp_col = add_ln446) else "0";
    icmp_ln185_fu_349_p2 <= "1" when (unsigned(zext_ln415_2_cast_fu_295_p1) > unsigned(ap_sig_allocacmp_col)) else "0";
    icmp_ln333_fu_378_p2 <= "1" when (col_reg_634_pp0_iter1_reg = ap_const_lv12_0) else "0";

    img0_data_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, img0_data_empty_n, ap_predicate_op58_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_predicate_op58_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            img0_data_blk_n <= img0_data_empty_n;
        else 
            img0_data_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img0_data_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op58_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op58_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img0_data_read <= ap_const_logic_1;
        else 
            img0_data_read <= ap_const_logic_0;
        end if; 
    end process;


    img1_data_blk_n_assign_proc : process(ap_enable_reg_pp0_iter11, img1_data_full_n, ap_predicate_op119_write_state12, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op119_write_state12 = ap_const_boolean_1))) then 
            img1_data_blk_n <= img1_data_full_n;
        else 
            img1_data_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img1_data_din <= OutputValues_reg_736;

    img1_data_write_assign_proc : process(ap_enable_reg_pp0_iter11, ap_predicate_op119_write_state12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op119_write_state12 = ap_const_boolean_1))) then 
            img1_data_write <= ap_const_logic_1;
        else 
            img1_data_write <= ap_const_logic_0;
        end if; 
    end process;

    p_0_0_042856_fu_423_p3 <= 
        tmp_21_fu_400_p5 when (spec_select47(0) = '1') else 
        tmp_22_fu_412_p5;
    p_0_0_0428_157_fu_441_p3 <= 
        tmp_21_fu_400_p5 when (spec_select51(0) = '1') else 
        tmp_s_fu_430_p5;
    p_0_0_0428_258_fu_459_p3 <= 
        tmp_21_fu_400_p5 when (spec_select55(0) = '1') else 
        tmp_23_fu_448_p5;
    row_ind_9_read_reg_628 <= row_ind_9;
    src_buf_13_fu_480_p3 <= 
        p_0_0_042856_fu_423_p3 when (icmp_ln185_reg_645_pp0_iter2_reg(0) = '1') else 
        src_buf_1_fu_118;
    src_buf_14_fu_525_p3 <= 
        src_buf_15_reg_699 when (icmp_ln333_reg_671_pp0_iter3_reg(0) = '1') else 
        src_buf_3_load_reg_711;
    src_buf_15_fu_473_p3 <= 
        p_0_0_0428_157_fu_441_p3 when (icmp_ln185_reg_645_pp0_iter2_reg(0) = '1') else 
        src_buf_3_fu_106;
    src_buf_16_fu_520_p3 <= 
        src_buf_17_reg_693 when (icmp_ln333_reg_671_pp0_iter3_reg(0) = '1') else 
        src_buf_5_load_reg_716;
    src_buf_17_fu_466_p3 <= 
        p_0_0_0428_258_fu_459_p3 when (icmp_ln185_reg_645_pp0_iter2_reg(0) = '1') else 
        src_buf_5_fu_114;
    zext_ln186_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_reg_634),64));
    zext_ln415_2_cast_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln415_2),12));
end behav;
