-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Otsu_Inverse is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (15 downto 0);
    M : IN STD_LOGIC_VECTOR (4 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of Otsu_Inverse is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal xf_cv_division_lut_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal xf_cv_division_lut_ce0 : STD_LOGIC;
    signal xf_cv_division_lut_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal M_read_reg_376 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_read_reg_381 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_read_reg_381_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln2970_fu_131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2970_reg_386 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2976_fu_137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2976_reg_391 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2973_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2973_reg_396 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_401 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2991_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2991_reg_407 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2993_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2993_reg_412 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2995_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2995_reg_417 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln3000_fu_312_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln3000_reg_422 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln3003_fu_324_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln3003_reg_427 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln3003_reg_427_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln3002_fu_352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal trunc_ln_fu_101_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal x3_fu_121_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal x4_fu_97_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal x2_fu_111_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln2973_fu_151_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_sel_2_fu_143_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln2973_1_fu_163_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_sel_fu_171_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_187_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_203_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal block_fu_228_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln2973_fu_235_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal block_1_fu_242_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln2993_fu_253_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln2989_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln2991_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln2991_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln2991_fu_277_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal pos_fu_260_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal pos_1_fu_290_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln2969_fu_249_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln2959_fu_298_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal B_L_fu_302_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln2952_fu_225_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln3003_fu_318_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln2956_fu_308_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln2962_fu_330_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln3000_fu_333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln3000_fu_336_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_fu_342_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln3002_1_fu_357_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln3003_fu_361_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Otsu_Inverse_xf_cv_division_lut_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    xf_cv_division_lut_U : component Otsu_Inverse_xf_cv_division_lut_ROM_AUTO_1R
    generic map (
        DataWidth => 16,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => xf_cv_division_lut_address0,
        ce0 => xf_cv_division_lut_ce0,
        q0 => xf_cv_division_lut_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                M_read_reg_376 <= M;
                add_ln3000_reg_422 <= add_ln3000_fu_312_p2;
                icmp_ln2970_reg_386 <= icmp_ln2970_fu_131_p2;
                icmp_ln2973_reg_396 <= icmp_ln2973_fu_157_p2;
                icmp_ln2976_reg_391 <= icmp_ln2976_fu_137_p2;
                icmp_ln2991_reg_407 <= icmp_ln2991_fu_197_p2;
                icmp_ln2993_reg_412 <= icmp_ln2993_fu_213_p2;
                icmp_ln2995_reg_417 <= icmp_ln2995_fu_219_p2;
                sub_ln3003_reg_427 <= sub_ln3003_fu_324_p2;
                tmp_reg_401 <= x_sel_fu_171_p3(3 downto 3);
                x_read_reg_381 <= x;
                x_read_reg_381_pp0_iter1_reg <= x_read_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                sub_ln3003_reg_427_pp0_iter2_reg <= sub_ln3003_reg_427;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    B_L_fu_302_p2 <= std_logic_vector(unsigned(zext_ln2969_fu_249_p1) + unsigned(zext_ln2959_fu_298_p1));
    add_ln3000_fu_312_p2 <= std_logic_vector(unsigned(B_L_fu_302_p2) + unsigned(ap_const_lv5_1F));
    add_ln3003_fu_318_p2 <= std_logic_vector(unsigned(zext_ln2952_fu_225_p1) + unsigned(ap_const_lv6_10));
    and_ln2991_fu_272_p2 <= (xor_ln2989_fu_267_p2 and icmp_ln2991_reg_407);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= zext_ln3002_1_fu_357_p1;
    ap_return_1 <= zext_ln3003_fu_361_p1;
    block_1_fu_242_p3 <= 
        select_ln2973_fu_235_p3 when (icmp_ln2970_reg_386(0) = '1') else 
        ap_const_lv4_0;
    block_fu_228_p3 <= 
        ap_const_lv4_8 when (icmp_ln2976_reg_391(0) = '1') else 
        ap_const_lv4_C;
    icmp_ln2970_fu_131_p2 <= "1" when (trunc_ln_fu_101_p4 = ap_const_lv4_0) else "0";
    icmp_ln2973_fu_157_p2 <= "1" when (or_ln2973_fu_151_p2 = ap_const_lv4_0) else "0";
    icmp_ln2976_fu_137_p2 <= "0" when (x3_fu_121_p4 = ap_const_lv4_0) else "1";
    icmp_ln2991_fu_197_p2 <= "0" when (tmp_4_fu_187_p4 = ap_const_lv2_0) else "1";
    icmp_ln2993_fu_213_p2 <= "0" when (tmp_5_fu_203_p4 = ap_const_lv3_0) else "1";
    icmp_ln2995_fu_219_p2 <= "0" when (x_sel_fu_171_p3 = ap_const_lv4_0) else "1";
    index_fu_342_p4 <= shl_ln3000_fu_336_p2(14 downto 5);
    or_ln2973_fu_151_p2 <= (x2_fu_111_p4 or trunc_ln_fu_101_p4);
    or_ln2991_fu_285_p2 <= (tmp_reg_401 or and_ln2991_fu_272_p2);
    pos_1_fu_290_p3 <= 
        select_ln2991_fu_277_p3 when (or_ln2991_fu_285_p2(0) = '1') else 
        pos_fu_260_p3;
    pos_fu_260_p3 <= 
        select_ln2993_fu_253_p3 when (icmp_ln2995_reg_417(0) = '1') else 
        ap_const_lv3_0;
    select_ln2973_1_fu_163_p3 <= 
        x_sel_2_fu_143_p3 when (icmp_ln2973_fu_157_p2(0) = '1') else 
        x2_fu_111_p4;
    select_ln2973_fu_235_p3 <= 
        block_fu_228_p3 when (icmp_ln2973_reg_396(0) = '1') else 
        ap_const_lv4_4;
    select_ln2991_fu_277_p3 <= 
        ap_const_lv3_2 when (and_ln2991_fu_272_p2(0) = '1') else 
        ap_const_lv3_1;
    select_ln2993_fu_253_p3 <= 
        ap_const_lv3_3 when (icmp_ln2993_reg_412(0) = '1') else 
        ap_const_lv3_4;
        sext_ln3000_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln3000_reg_422),32));

    shl_ln3000_fu_336_p2 <= std_logic_vector(shift_left(unsigned(zext_ln2962_fu_330_p1),to_integer(unsigned('0' & sext_ln3000_fu_333_p1(31-1 downto 0)))));
    sub_ln3003_fu_324_p2 <= std_logic_vector(unsigned(add_ln3003_fu_318_p2) - unsigned(zext_ln2956_fu_308_p1));
    tmp_4_fu_187_p4 <= x_sel_fu_171_p3(3 downto 2);
    tmp_5_fu_203_p4 <= x_sel_fu_171_p3(3 downto 1);
    trunc_ln_fu_101_p4 <= x(15 downto 12);
    x2_fu_111_p4 <= x(11 downto 8);
    x3_fu_121_p4 <= x(7 downto 4);
    x4_fu_97_p1 <= x(4 - 1 downto 0);
    x_sel_2_fu_143_p3 <= 
        x3_fu_121_p4 when (icmp_ln2976_fu_137_p2(0) = '1') else 
        x4_fu_97_p1;
    x_sel_fu_171_p3 <= 
        select_ln2973_1_fu_163_p3 when (icmp_ln2970_fu_131_p2(0) = '1') else 
        trunc_ln_fu_101_p4;
    xf_cv_division_lut_address0 <= zext_ln3002_fu_352_p1(10 - 1 downto 0);

    xf_cv_division_lut_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            xf_cv_division_lut_ce0 <= ap_const_logic_1;
        else 
            xf_cv_division_lut_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln2989_fu_267_p2 <= (tmp_reg_401 xor ap_const_lv1_1);
    zext_ln2952_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(M_read_reg_376),6));
    zext_ln2956_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_L_fu_302_p2),6));
    zext_ln2959_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pos_1_fu_290_p3),5));
    zext_ln2962_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_read_reg_381_pp0_iter1_reg),32));
    zext_ln2969_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(block_1_fu_242_p3),5));
    zext_ln3002_1_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_cv_division_lut_q0),32));
    zext_ln3002_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_fu_342_p4),64));
    zext_ln3003_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln3003_reg_427_pp0_iter2_reg),8));
end behav;
