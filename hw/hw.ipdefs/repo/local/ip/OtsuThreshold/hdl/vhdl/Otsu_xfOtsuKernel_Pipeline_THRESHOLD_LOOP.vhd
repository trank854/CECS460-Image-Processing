-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Otsu_xfOtsuKernel_Pipeline_THRESHOLD_LOOP is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    HistArray_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    HistArray_ce0 : OUT STD_LOGIC;
    HistArray_q0 : IN STD_LOGIC_VECTOR (32 downto 0);
    total : IN STD_LOGIC_VECTOR (24 downto 0);
    zext_ln104 : IN STD_LOGIC_VECTOR (24 downto 0);
    sh_prom_cast_cast_cast_cast : IN STD_LOGIC_VECTOR (7 downto 0);
    conv106 : IN STD_LOGIC_VECTOR (31 downto 0);
    sh_prom122_cast_cast_cast_cast : IN STD_LOGIC_VECTOR (8 downto 0);
    sext_ln100 : IN STD_LOGIC_VECTOR (7 downto 0);
    max_val_2_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_val_2_out_ap_vld : OUT STD_LOGIC;
    grp_Inverse_fu_83_p_din1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    grp_Inverse_fu_83_p_din2 : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_Inverse_fu_83_p_dout0_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_Inverse_fu_83_p_dout0_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    grp_Inverse_fu_83_p_ce : OUT STD_LOGIC;
    grp_Inverse_fu_83_p_start : OUT STD_LOGIC;
    grp_Inverse_fu_83_p_ready : IN STD_LOGIC;
    grp_Inverse_fu_83_p_done : IN STD_LOGIC;
    grp_Inverse_fu_83_p_idle : IN STD_LOGIC;
    grp_fu_654_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_654_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_654_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_654_p_ce : OUT STD_LOGIC );
end;


architecture behav of Otsu_xfOtsuKernel_Pipeline_THRESHOLD_LOOP is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state15_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state18_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state21_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_state24_pp0_stage2_iter7 : BOOLEAN;
    signal ap_block_state27_pp0_stage2_iter8 : BOOLEAN;
    signal ap_block_state30_pp0_stage2_iter9 : BOOLEAN;
    signal ap_block_state33_pp0_stage2_iter10 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln98_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_570 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal reg_179 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state29_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state32_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln98_reg_603 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal icmp_ln98_reg_603_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln98_reg_603_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln100_cast_fu_187_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln100_cast_reg_538 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_prom122_cast_cast_cast_cast_cast_cast_fu_195_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sh_prom122_cast_cast_cast_cast_cast_cast_reg_543 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv106_cast_fu_199_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv106_cast_reg_548 : STD_LOGIC_VECTOR (63 downto 0);
    signal sh_prom_cast_cast_cast_cast_cast_cast_fu_207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sh_prom_cast_cast_cast_cast_cast_cast_reg_553 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_cast_fu_211_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_cast_reg_559 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_reg_564 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln92_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_570_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_570_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_570_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_570_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_570_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_570_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_570_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_570_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_570_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal HistArray_load_reg_579 : STD_LOGIC_VECTOR (32 downto 0);
    signal wB_1_fu_269_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal wB_1_reg_584 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln98_fu_275_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln98_reg_592 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln98_reg_592_pp0_iter1_reg : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln98_reg_592_pp0_iter2_reg : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln98_reg_592_pp0_iter3_reg : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln98_reg_592_pp0_iter4_reg : STD_LOGIC_VECTOR (24 downto 0);
    signal i_2_fu_281_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_2_reg_598 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln98_reg_603_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_reg_603_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_reg_603_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_reg_603_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_reg_603_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_reg_603_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_reg_603_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_607 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_607_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_607_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_607_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_607_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_607_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_607_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_607_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_607_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln101_fu_305_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln101_reg_616 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln101_reg_616_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln101_reg_616_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln101_reg_616_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln101_reg_616_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln101_reg_616_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln101_reg_616_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln101_reg_616_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln101_reg_616_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln101_reg_616_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_159_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal mul_ln101_reg_626 : STD_LOGIC_VECTOR (40 downto 0);
    signal zext_ln106_fu_313_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sumB_1_fu_331_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sumB_1_reg_636 : STD_LOGIC_VECTOR (63 downto 0);
    signal c1_fu_342_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal c1_reg_641 : STD_LOGIC_VECTOR (63 downto 0);
    signal c1_reg_641_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_163_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln104_reg_646 : STD_LOGIC_VECTOR (63 downto 0);
    signal a1_fu_347_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal a1_reg_651 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_fu_351_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_reg_656 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_662 : STD_LOGIC_VECTOR (0 downto 0);
    signal d_1_fu_368_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_1_reg_667 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_inv2_reg_673 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_inv2_reg_673_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_171_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln110_reg_678 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_fu_402_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_reg_683 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret8_reg_688_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln119_fu_406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln119_1_fu_410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal maxtmp_fu_426_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal maxtmp_reg_703 : STD_LOGIC_VECTOR (63 downto 0);
    signal call_ret_reg_708_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret_reg_708_pp0_iter8_reg_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret_reg_708_pp0_iter9_reg_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_167_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln120_reg_718 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_fu_448_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_reg_723 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal grp_Inverse_fu_146_ap_ready : STD_LOGIC;
    signal grp_Inverse_fu_146_x : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Inverse_fu_146_ap_start_reg : STD_LOGIC := '0';
    signal ap_predicate_op114_call_state16_state15 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln92_fu_249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal wB_fu_70 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_74 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sumB_fu_78 : STD_LOGIC_VECTOR (63 downto 0);
    signal varMax_fu_82 : STD_LOGIC_VECTOR (63 downto 0);
    signal varMax_1_fu_464_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_val_1_fu_86 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_val_fu_471_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_max_val_1_load_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_max_val_1_load : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal grp_fu_155_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_155_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_159_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_159_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_163_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_167_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_prom122_cast_cast_cast_cast_cast_fu_191_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_prom_cast_cast_cast_cast_cast_fu_203_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln97_fu_257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln97_2_fu_265_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln97_1_fu_261_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal lshr_ln99_fu_291_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln101_1_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln108_fu_363_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal wF_fu_374_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal lshr_ln110_fu_398_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln119_fu_418_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln119_2_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln120_fu_440_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln120_1_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln122_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to10 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_159_p00 : STD_LOGIC_VECTOR (40 downto 0);
    signal grp_fu_159_p10 : STD_LOGIC_VECTOR (40 downto 0);
    signal grp_fu_167_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_condition_519 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component Otsu_Inverse IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (15 downto 0);
        M : IN STD_LOGIC_VECTOR (4 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Otsu_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Otsu_mul_33ns_8ns_41_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (40 downto 0) );
    end component;


    component Otsu_mul_64s_25ns_64_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Otsu_mul_64s_32ns_64_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Otsu_mul_64s_64s_64_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Otsu_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_33ns_8ns_41_2_1_U100 : component Otsu_mul_33ns_8ns_41_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 33,
        din1_WIDTH => 8,
        dout_WIDTH => 41)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_159_p0,
        din1 => grp_fu_159_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_159_p2);

    mul_64s_25ns_64_5_1_U101 : component Otsu_mul_64s_25ns_64_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 25,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sumB_1_reg_636,
        din1 => grp_fu_163_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_163_p2);

    mul_64s_32ns_64_5_1_U102 : component Otsu_mul_64s_32ns_64_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => maxtmp_reg_703,
        din1 => grp_fu_167_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_167_p2);

    mul_64s_64s_64_5_1_U103 : component Otsu_mul_64s_64s_64_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => d_1_reg_667,
        din1 => d_1_reg_667,
        ce => ap_const_logic_1,
        dout => grp_fu_171_p2);

    flow_control_loop_pipe_sequential_init_U : component Otsu_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_Inverse_fu_146_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Inverse_fu_146_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln98_reg_603_pp0_iter5_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_predicate_op114_call_state16_state15 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                    grp_Inverse_fu_146_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Inverse_fu_146_ap_ready = ap_const_logic_1)) then 
                    grp_Inverse_fu_146_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_74 <= ap_const_lv9_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    i_fu_74 <= i_2_reg_598;
                end if;
            end if; 
        end if;
    end process;

    max_val_1_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                max_val_1_fu_86 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln98_reg_603_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                max_val_1_fu_86 <= max_val_fu_471_p3;
            end if; 
        end if;
    end process;

    sumB_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                sumB_fu_78 <= ap_const_lv64_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln98_reg_603 = ap_const_lv1_0))) then 
                sumB_fu_78 <= sumB_1_fu_331_p2;
            end if; 
        end if;
    end process;

    varMax_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                varMax_fu_82 <= ap_const_lv64_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln98_reg_603_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                varMax_fu_82 <= varMax_1_fu_464_p3;
            end if; 
        end if;
    end process;

    wB_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    wB_fu_70 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    wB_fu_70 <= wB_1_reg_584;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_reg_570 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                HistArray_load_reg_579 <= HistArray_q0;
                add_ln98_reg_592 <= add_ln98_fu_275_p2;
                wB_1_reg_584 <= wB_1_fu_269_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln98_reg_603_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                a1_reg_651 <= a1_fu_347_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln98_reg_592_pp0_iter1_reg <= add_ln98_reg_592;
                add_ln98_reg_592_pp0_iter2_reg <= add_ln98_reg_592_pp0_iter1_reg;
                add_ln98_reg_592_pp0_iter3_reg <= add_ln98_reg_592_pp0_iter2_reg;
                add_ln98_reg_592_pp0_iter4_reg <= add_ln98_reg_592_pp0_iter3_reg;
                call_ret_reg_708_pp0_iter8_reg_1 <= call_ret_reg_708_1;
                call_ret_reg_708_pp0_iter9_reg_1 <= call_ret_reg_708_pp0_iter8_reg_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                c1_reg_641_pp0_iter2_reg <= c1_reg_641;
                i_2_reg_598 <= i_2_fu_281_p2;
                icmp_ln98_reg_603_pp0_iter1_reg <= icmp_ln98_reg_603;
                icmp_ln98_reg_603_pp0_iter2_reg <= icmp_ln98_reg_603_pp0_iter1_reg;
                icmp_ln98_reg_603_pp0_iter3_reg <= icmp_ln98_reg_603_pp0_iter2_reg;
                icmp_ln98_reg_603_pp0_iter4_reg <= icmp_ln98_reg_603_pp0_iter3_reg;
                icmp_ln98_reg_603_pp0_iter5_reg <= icmp_ln98_reg_603_pp0_iter4_reg;
                icmp_ln98_reg_603_pp0_iter6_reg <= icmp_ln98_reg_603_pp0_iter5_reg;
                icmp_ln98_reg_603_pp0_iter7_reg <= icmp_ln98_reg_603_pp0_iter6_reg;
                icmp_ln98_reg_603_pp0_iter8_reg <= icmp_ln98_reg_603_pp0_iter7_reg;
                icmp_ln98_reg_603_pp0_iter9_reg <= icmp_ln98_reg_603_pp0_iter8_reg;
                icmp_ln99_reg_607_pp0_iter1_reg <= icmp_ln99_reg_607;
                icmp_ln99_reg_607_pp0_iter2_reg <= icmp_ln99_reg_607_pp0_iter1_reg;
                icmp_ln99_reg_607_pp0_iter3_reg <= icmp_ln99_reg_607_pp0_iter2_reg;
                icmp_ln99_reg_607_pp0_iter4_reg <= icmp_ln99_reg_607_pp0_iter3_reg;
                icmp_ln99_reg_607_pp0_iter5_reg <= icmp_ln99_reg_607_pp0_iter4_reg;
                icmp_ln99_reg_607_pp0_iter6_reg <= icmp_ln99_reg_607_pp0_iter5_reg;
                icmp_ln99_reg_607_pp0_iter7_reg <= icmp_ln99_reg_607_pp0_iter6_reg;
                icmp_ln99_reg_607_pp0_iter8_reg <= icmp_ln99_reg_607_pp0_iter7_reg;
                trunc_ln101_reg_616_pp0_iter1_reg <= trunc_ln101_reg_616;
                trunc_ln101_reg_616_pp0_iter2_reg <= trunc_ln101_reg_616_pp0_iter1_reg;
                trunc_ln101_reg_616_pp0_iter3_reg <= trunc_ln101_reg_616_pp0_iter2_reg;
                trunc_ln101_reg_616_pp0_iter4_reg <= trunc_ln101_reg_616_pp0_iter3_reg;
                trunc_ln101_reg_616_pp0_iter5_reg <= trunc_ln101_reg_616_pp0_iter4_reg;
                trunc_ln101_reg_616_pp0_iter6_reg <= trunc_ln101_reg_616_pp0_iter5_reg;
                trunc_ln101_reg_616_pp0_iter7_reg <= trunc_ln101_reg_616_pp0_iter6_reg;
                trunc_ln101_reg_616_pp0_iter8_reg <= trunc_ln101_reg_616_pp0_iter7_reg;
                trunc_ln101_reg_616_pp0_iter9_reg <= trunc_ln101_reg_616_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln98_reg_603 = ap_const_lv1_0))) then
                c1_reg_641 <= c1_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln99_reg_607_pp0_iter5_reg = ap_const_lv1_0) and (icmp_ln92_reg_570_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln98_reg_603_pp0_iter5_reg = ap_const_lv1_0))) then
                call_ret8_reg_688_1 <= grp_Inverse_fu_83_p_dout0_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln98_reg_603_pp0_iter6_reg = ap_const_lv1_0))) then
                call_ret_reg_708_1 <= grp_Inverse_fu_83_p_dout0_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    conv106_cast_reg_548(31 downto 0) <= conv106_cast_fu_199_p1(31 downto 0);
                i_1_reg_564 <= ap_sig_allocacmp_i_1;
                icmp_ln92_reg_570 <= icmp_ln92_fu_243_p2;
                icmp_ln92_reg_570_pp0_iter1_reg <= icmp_ln92_reg_570;
                icmp_ln92_reg_570_pp0_iter2_reg <= icmp_ln92_reg_570_pp0_iter1_reg;
                icmp_ln92_reg_570_pp0_iter3_reg <= icmp_ln92_reg_570_pp0_iter2_reg;
                icmp_ln92_reg_570_pp0_iter4_reg <= icmp_ln92_reg_570_pp0_iter3_reg;
                icmp_ln92_reg_570_pp0_iter5_reg <= icmp_ln92_reg_570_pp0_iter4_reg;
                icmp_ln92_reg_570_pp0_iter6_reg <= icmp_ln92_reg_570_pp0_iter5_reg;
                icmp_ln92_reg_570_pp0_iter7_reg <= icmp_ln92_reg_570_pp0_iter6_reg;
                icmp_ln92_reg_570_pp0_iter8_reg <= icmp_ln92_reg_570_pp0_iter7_reg;
                icmp_ln92_reg_570_pp0_iter9_reg <= icmp_ln92_reg_570_pp0_iter8_reg;
                sext_ln100_cast_reg_538 <= sext_ln100_cast_fu_187_p1;
                    sh_prom122_cast_cast_cast_cast_cast_cast_reg_543(31 downto 0) <= sh_prom122_cast_cast_cast_cast_cast_cast_fu_195_p1(31 downto 0);
                    sh_prom_cast_cast_cast_cast_cast_cast_reg_553(31 downto 0) <= sh_prom_cast_cast_cast_cast_cast_cast_fu_207_p1(31 downto 0);
                x_inv2_reg_673_pp0_iter6_reg <= x_inv2_reg_673;
                    zext_ln104_cast_reg_559(24 downto 0) <= zext_ln104_cast_fu_211_p1(24 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln98_reg_603_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                d_1_reg_667 <= d_1_fu_368_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln98_reg_603_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                d_reg_656 <= d_fu_351_p2;
                tmp_reg_662 <= d_fu_351_p2(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_reg_570 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                icmp_ln98_reg_603 <= icmp_ln98_fu_286_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_reg_570 = ap_const_lv1_0) and (icmp_ln98_fu_286_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                icmp_ln99_reg_607 <= icmp_ln99_fu_295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln98_reg_603_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                max_reg_723 <= max_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln98_reg_603_pp0_iter6_reg = ap_const_lv1_0))) then
                maxtmp_reg_703 <= maxtmp_fu_426_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln98_reg_603 = ap_const_lv1_0))) then
                mul_ln101_reg_626 <= grp_fu_159_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln98_reg_603_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln104_reg_646 <= grp_fu_163_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln98_reg_603_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul_ln110_reg_678 <= grp_fu_171_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln98_reg_603_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_ln120_reg_718 <= grp_fu_167_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln98_reg_603_pp0_iter5_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln98_reg_603 = ap_const_lv1_0)))) then
                reg_179 <= grp_fu_654_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln98_reg_603_pp0_iter5_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln98_reg_603_pp0_iter6_reg = ap_const_lv1_0)))) then
                reg_183 <= grp_Inverse_fu_83_p_dout0_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln98_reg_603_pp0_iter5_reg = ap_const_lv1_0))) then
                res_reg_683 <= res_fu_402_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln98_reg_603 = ap_const_lv1_0))) then
                sumB_1_reg_636 <= sumB_1_fu_331_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_reg_570 = ap_const_lv1_0) and (icmp_ln99_fu_295_p2 = ap_const_lv1_0) and (icmp_ln98_fu_286_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                trunc_ln101_reg_616 <= trunc_ln101_fu_305_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln98_reg_603_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                x_inv2_reg_673 <= wF_fu_374_p2(24 downto 9);
            end if;
        end if;
    end process;
    sh_prom122_cast_cast_cast_cast_cast_cast_reg_543(63 downto 32) <= "00000000000000000000000000000000";
    conv106_cast_reg_548(63 downto 32) <= "00000000000000000000000000000000";
    sh_prom_cast_cast_cast_cast_cast_cast_reg_553(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln104_cast_reg_559(63 downto 25) <= "000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to10, ap_block_pp0_stage1_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to10 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    HistArray_address0 <= zext_ln92_fu_249_p1(8 - 1 downto 0);

    HistArray_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            HistArray_ce0 <= ap_const_logic_1;
        else 
            HistArray_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a1_fu_347_p2 <= std_logic_vector(shift_right(unsigned(mul_ln104_reg_646),to_integer(unsigned('0' & sh_prom_cast_cast_cast_cast_cast_cast_reg_553(31-1 downto 0)))));
    add_ln98_fu_275_p2 <= std_logic_vector(unsigned(trunc_ln97_2_fu_265_p1) + unsigned(trunc_ln97_1_fu_261_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage2_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage2_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage2_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage2_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_519_assign_proc : process(icmp_ln92_reg_570_pp0_iter9_reg, icmp_ln98_reg_603_pp0_iter8_reg, icmp_ln99_reg_607_pp0_iter8_reg)
    begin
                ap_condition_519 <= ((icmp_ln99_reg_607_pp0_iter8_reg = ap_const_lv1_1) and (icmp_ln98_reg_603_pp0_iter8_reg = ap_const_lv1_0) and (icmp_ln92_reg_570_pp0_iter9_reg = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, icmp_ln98_fu_286_p2, icmp_ln99_fu_295_p2, icmp_ln92_reg_570)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and ((icmp_ln92_reg_570 = ap_const_lv1_1) or ((icmp_ln99_fu_295_p2 = ap_const_lv1_1) and (icmp_ln98_fu_286_p2 = ap_const_lv1_0))))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter9_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to10_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to10 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to10 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_predicate_op114_call_state16_state15_assign_proc : process(icmp_ln92_reg_570_pp0_iter4_reg, icmp_ln98_reg_603_pp0_iter3_reg, icmp_ln99_reg_607_pp0_iter3_reg)
    begin
                ap_predicate_op114_call_state16_state15 <= ((icmp_ln99_reg_607_pp0_iter3_reg = ap_const_lv1_0) and (icmp_ln98_reg_603_pp0_iter3_reg = ap_const_lv1_0) and (icmp_ln92_reg_570_pp0_iter4_reg = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, i_2_reg_598, ap_block_pp0_stage0, ap_loop_init, i_fu_74)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if ((ap_loop_init = ap_const_logic_1)) then 
                ap_sig_allocacmp_i_1 <= ap_const_lv9_0;
            elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                ap_sig_allocacmp_i_1 <= i_2_reg_598;
            else 
                ap_sig_allocacmp_i_1 <= i_fu_74;
            end if;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_74;
        end if; 
    end process;


    ap_sig_allocacmp_max_val_1_load_assign_proc : process(ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage2, icmp_ln98_reg_603_pp0_iter9_reg, ap_block_pp0_stage2, max_val_1_fu_86, max_val_fu_471_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln98_reg_603_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_sig_allocacmp_max_val_1_load <= max_val_fu_471_p3;
        else 
            ap_sig_allocacmp_max_val_1_load <= max_val_1_fu_86;
        end if; 
    end process;


    ap_sig_allocacmp_max_val_1_load_1_assign_proc : process(ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage2, icmp_ln98_reg_603_pp0_iter9_reg, ap_block_pp0_stage2, max_val_1_fu_86, max_val_fu_471_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln98_reg_603_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_sig_allocacmp_max_val_1_load_1 <= max_val_fu_471_p3;
        else 
            ap_sig_allocacmp_max_val_1_load_1 <= max_val_1_fu_86;
        end if; 
    end process;

    c1_fu_342_p2 <= std_logic_vector(shift_right(unsigned(reg_179),to_integer(unsigned('0' & sh_prom_cast_cast_cast_cast_cast_cast_reg_553(31-1 downto 0)))));
    conv106_cast_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv106),64));
    d_1_fu_368_p3 <= 
        sub_ln108_fu_363_p2 when (tmp_reg_662(0) = '1') else 
        d_reg_656;
    d_fu_351_p2 <= std_logic_vector(unsigned(a1_reg_651) - unsigned(c1_reg_641_pp0_iter2_reg));
    grp_Inverse_fu_146_ap_ready <= grp_Inverse_fu_83_p_ready;

    grp_Inverse_fu_146_x_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, icmp_ln98_reg_603_pp0_iter5_reg, icmp_ln92_reg_570_pp0_iter4_reg, add_ln98_reg_592_pp0_iter4_reg, icmp_ln98_reg_603_pp0_iter4_reg, icmp_ln99_reg_607_pp0_iter4_reg, x_inv2_reg_673_pp0_iter6_reg, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln98_reg_603_pp0_iter5_reg = ap_const_lv1_0))) then 
            grp_Inverse_fu_146_x <= x_inv2_reg_673_pp0_iter6_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln99_reg_607_pp0_iter4_reg = ap_const_lv1_0) and (icmp_ln98_reg_603_pp0_iter4_reg = ap_const_lv1_0) and (icmp_ln92_reg_570_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_Inverse_fu_146_x <= add_ln98_reg_592_pp0_iter4_reg(24 downto 9);
        else 
            grp_Inverse_fu_146_x <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_Inverse_fu_83_p_ce <= ap_const_logic_1;
    grp_Inverse_fu_83_p_din1 <= grp_Inverse_fu_146_x;
    grp_Inverse_fu_83_p_din2 <= ap_const_lv5_0;
    grp_Inverse_fu_83_p_start <= grp_Inverse_fu_146_ap_start_reg;

    grp_fu_155_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, zext_ln106_fu_313_p1, zext_ln119_1_fu_410_p1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_155_p0 <= zext_ln119_1_fu_410_p1(32 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_155_p0 <= zext_ln106_fu_313_p1(32 - 1 downto 0);
        else 
            grp_fu_155_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_155_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, conv106_cast_reg_548, zext_ln119_fu_406_p1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_155_p1 <= zext_ln119_fu_406_p1(32 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_155_p1 <= conv106_cast_reg_548(32 - 1 downto 0);
        else 
            grp_fu_155_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_159_p0 <= grp_fu_159_p00(33 - 1 downto 0);
    grp_fu_159_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(HistArray_load_reg_579),41));
    grp_fu_159_p1 <= grp_fu_159_p10(8 - 1 downto 0);
    grp_fu_159_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln101_fu_305_p1),41));
    grp_fu_163_p1 <= zext_ln104_cast_reg_559(25 - 1 downto 0);
    grp_fu_167_p1 <= grp_fu_167_p10(32 - 1 downto 0);
    grp_fu_167_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_183),64));
    grp_fu_654_p_ce <= ap_const_logic_1;
    grp_fu_654_p_din0 <= grp_fu_155_p0;
    grp_fu_654_p_din1 <= grp_fu_155_p1;
    i_2_fu_281_p2 <= std_logic_vector(unsigned(i_1_reg_564) + unsigned(ap_const_lv9_1));
    icmp_ln122_fu_459_p2 <= "1" when (unsigned(max_reg_723) > unsigned(varMax_fu_82)) else "0";
    icmp_ln92_fu_243_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv9_100) else "0";
    icmp_ln98_fu_286_p2 <= "1" when (wB_1_reg_584 = ap_const_lv32_0) else "0";
    icmp_ln99_fu_295_p2 <= "1" when (lshr_ln99_fu_291_p2 = ap_const_lv32_1) else "0";
    lshr_ln110_fu_398_p2 <= std_logic_vector(shift_right(unsigned(mul_ln110_reg_678),to_integer(unsigned('0' & sh_prom122_cast_cast_cast_cast_cast_cast_reg_543(31-1 downto 0)))));
    lshr_ln99_fu_291_p2 <= std_logic_vector(shift_right(unsigned(wB_1_reg_584),to_integer(unsigned('0' & sext_ln100_cast_reg_538(31-1 downto 0)))));
    max_fu_448_p2 <= std_logic_vector(shift_right(unsigned(mul_ln120_reg_718),to_integer(unsigned('0' & zext_ln120_1_fu_444_p1(31-1 downto 0)))));

    max_val_2_out_assign_proc : process(ap_CS_fsm_pp0_stage2, icmp_ln92_reg_570_pp0_iter9_reg, ap_sig_allocacmp_max_val_1_load_1, ap_sig_allocacmp_max_val_1_load, ap_block_pp0_stage2_01001, ap_condition_519)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
            if ((icmp_ln92_reg_570_pp0_iter9_reg = ap_const_lv1_1)) then 
                max_val_2_out <= ap_sig_allocacmp_max_val_1_load;
            elsif ((ap_const_boolean_1 = ap_condition_519)) then 
                max_val_2_out <= ap_sig_allocacmp_max_val_1_load_1;
            else 
                max_val_2_out <= "XXXXXXXX";
            end if;
        else 
            max_val_2_out <= "XXXXXXXX";
        end if; 
    end process;


    max_val_2_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, icmp_ln92_reg_570_pp0_iter9_reg, icmp_ln98_reg_603_pp0_iter8_reg, icmp_ln99_reg_607_pp0_iter8_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln92_reg_570_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln99_reg_607_pp0_iter8_reg = ap_const_lv1_1) and (icmp_ln98_reg_603_pp0_iter8_reg = ap_const_lv1_0) and (icmp_ln92_reg_570_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            max_val_2_out_ap_vld <= ap_const_logic_1;
        else 
            max_val_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    max_val_fu_471_p3 <= 
        trunc_ln101_reg_616_pp0_iter9_reg when (icmp_ln122_fu_459_p2(0) = '1') else 
        max_val_1_fu_86;
    maxtmp_fu_426_p2 <= std_logic_vector(shift_right(unsigned(reg_179),to_integer(unsigned('0' & zext_ln119_2_fu_422_p1(31-1 downto 0)))));
    res_fu_402_p1 <= lshr_ln110_fu_398_p2(32 - 1 downto 0);
        sext_ln100_cast_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln100),32));

        sext_ln119_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(call_ret8_reg_688_1),32));

        sext_ln120_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(call_ret_reg_708_pp0_iter9_reg_1),32));

    sh_prom122_cast_cast_cast_cast_cast_cast_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom122_cast_cast_cast_cast_cast_fu_191_p1),64));
        sh_prom122_cast_cast_cast_cast_cast_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_prom122_cast_cast_cast_cast),32));

    sh_prom_cast_cast_cast_cast_cast_cast_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_cast_cast_cast_cast_cast_fu_203_p1),64));
        sh_prom_cast_cast_cast_cast_cast_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_prom_cast_cast_cast_cast),32));

    sub_ln108_fu_363_p2 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(d_reg_656));
    sumB_1_fu_331_p2 <= std_logic_vector(unsigned(sumB_fu_78) + unsigned(zext_ln101_1_fu_328_p1));
    trunc_ln101_fu_305_p1 <= i_1_reg_564(8 - 1 downto 0);
    trunc_ln97_1_fu_261_p1 <= wB_fu_70(25 - 1 downto 0);
    trunc_ln97_2_fu_265_p1 <= HistArray_q0(25 - 1 downto 0);
    trunc_ln97_fu_257_p1 <= HistArray_q0(32 - 1 downto 0);
    varMax_1_fu_464_p3 <= 
        max_reg_723 when (icmp_ln122_fu_459_p2(0) = '1') else 
        varMax_fu_82;
    wB_1_fu_269_p2 <= std_logic_vector(unsigned(trunc_ln97_fu_257_p1) + unsigned(wB_fu_70));
    wF_fu_374_p2 <= std_logic_vector(unsigned(total) - unsigned(add_ln98_reg_592_pp0_iter4_reg));
    zext_ln101_1_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln101_reg_626),64));
    zext_ln104_cast_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln104),64));
    zext_ln106_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wB_1_reg_584),64));
    zext_ln119_1_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_183),64));
    zext_ln119_2_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln119_fu_418_p1),64));
    zext_ln119_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(res_reg_683),64));
    zext_ln120_1_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln120_fu_440_p1),64));
    zext_ln92_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),64));
end behav;
