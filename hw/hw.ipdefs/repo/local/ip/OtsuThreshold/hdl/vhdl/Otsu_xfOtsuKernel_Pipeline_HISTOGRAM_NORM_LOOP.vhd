-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Otsu_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_hist_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_hist_0_ce0 : OUT STD_LOGIC;
    p_hist_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    wdt_1_cast : IN STD_LOGIC_VECTOR (31 downto 0);
    sh_prom_i177_cast_cast_cast_cast : IN STD_LOGIC_VECTOR (6 downto 0);
    sh_prom4_i183_cast_cast_cast_cast : IN STD_LOGIC_VECTOR (7 downto 0);
    cmp_i174 : IN STD_LOGIC_VECTOR (0 downto 0);
    conv3_i12_i_i156 : IN STD_LOGIC_VECTOR (31 downto 0);
    sh_prom_i_cast_cast_cast_cast : IN STD_LOGIC_VECTOR (6 downto 0);
    sh_prom4_i_cast_cast_cast_cast : IN STD_LOGIC_VECTOR (7 downto 0);
    cmp_i : IN STD_LOGIC_VECTOR (0 downto 0);
    HistArray_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    HistArray_ce0 : OUT STD_LOGIC;
    HistArray_we0 : OUT STD_LOGIC;
    HistArray_d0 : OUT STD_LOGIC_VECTOR (32 downto 0);
    grp_fu_654_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_654_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_654_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_654_p_ce : OUT STD_LOGIC );
end;


architecture behav of Otsu_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln75_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sh_prom4_i_cast_cast_cast_cast_cast_cast_fu_144_p1 : STD_LOGIC_VECTOR (76 downto 0);
    signal sh_prom4_i_cast_cast_cast_cast_cast_cast_reg_286 : STD_LOGIC_VECTOR (76 downto 0);
    signal sh_prom_i_cast_cast_cast_cast_cast_cast_fu_152_p1 : STD_LOGIC_VECTOR (76 downto 0);
    signal sh_prom_i_cast_cast_cast_cast_cast_cast_reg_291 : STD_LOGIC_VECTOR (76 downto 0);
    signal conv3_i12_i_i156_cast_fu_156_p1 : STD_LOGIC_VECTOR (76 downto 0);
    signal conv3_i12_i_i156_cast_reg_296 : STD_LOGIC_VECTOR (76 downto 0);
    signal sh_prom4_i183_cast_cast_cast_cast_cast_cast_fu_164_p1 : STD_LOGIC_VECTOR (76 downto 0);
    signal sh_prom4_i183_cast_cast_cast_cast_cast_cast_reg_301 : STD_LOGIC_VECTOR (76 downto 0);
    signal sh_prom_i177_cast_cast_cast_cast_cast_cast_fu_172_p1 : STD_LOGIC_VECTOR (76 downto 0);
    signal sh_prom_i177_cast_cast_cast_cast_cast_cast_reg_306 : STD_LOGIC_VECTOR (76 downto 0);
    signal wdt_1_cast_cast_fu_176_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal wdt_1_cast_cast_reg_311 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_fu_200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_reg_320 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_reg_320_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_reg_320_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_reg_320_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_reg_320_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_reg_320_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_reg_320_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_reg_320_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_reg_320_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_reg_320_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_reg_320_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_hist_0_load_reg_330 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln80_fu_210_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln80_reg_340 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp2_fu_235_p3 : STD_LOGIC_VECTOR (44 downto 0);
    signal tmp2_reg_345 : STD_LOGIC_VECTOR (44 downto 0);
    signal grp_fu_136_p2 : STD_LOGIC_VECTOR (76 downto 0);
    signal mul_ln81_reg_355 : STD_LOGIC_VECTOR (76 downto 0);
    signal select_ln81_fu_262_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal select_ln81_reg_361 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_54 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln75_fu_194_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_3 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_136_p0 : STD_LOGIC_VECTOR (44 downto 0);
    signal grp_fu_136_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_prom4_i_cast_cast_cast_cast_cast_fu_140_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_prom_i_cast_cast_cast_cast_cast_fu_148_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_prom4_i183_cast_cast_cast_cast_cast_fu_160_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_prom_i177_cast_cast_cast_cast_cast_fu_168_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln80_1_fu_214_p1 : STD_LOGIC_VECTOR (76 downto 0);
    signal lshr_ln80_fu_217_p2 : STD_LOGIC_VECTOR (76 downto 0);
    signal shl_ln80_fu_222_p2 : STD_LOGIC_VECTOR (76 downto 0);
    signal trunc_ln80_fu_227_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal trunc_ln80_1_fu_231_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal lshr_ln81_fu_246_p2 : STD_LOGIC_VECTOR (76 downto 0);
    signal shl_ln81_fu_250_p2 : STD_LOGIC_VECTOR (76 downto 0);
    signal trunc_ln81_fu_254_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln81_1_fu_258_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_136_p00 : STD_LOGIC_VECTOR (76 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component Otsu_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Otsu_mul_45ns_32ns_77_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (44 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (76 downto 0) );
    end component;


    component Otsu_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_45ns_32ns_77_5_1_U83 : component Otsu_mul_45ns_32ns_77_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 45,
        din1_WIDTH => 32,
        dout_WIDTH => 77)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_136_p0,
        din1 => grp_fu_136_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_136_p2);

    flow_control_loop_pipe_sequential_init_U : component Otsu_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln75_fu_188_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_54 <= add_ln75_fu_194_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_54 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                mul_ln80_reg_340 <= grp_fu_654_p_dout0;
                mul_ln81_reg_355 <= grp_fu_136_p2;
                select_ln81_reg_361 <= select_ln81_fu_262_p3;
                tmp2_reg_345 <= tmp2_fu_235_p3;
                    zext_ln75_reg_320_pp0_iter10_reg(8 downto 0) <= zext_ln75_reg_320_pp0_iter9_reg(8 downto 0);
                    zext_ln75_reg_320_pp0_iter2_reg(8 downto 0) <= zext_ln75_reg_320_pp0_iter1_reg(8 downto 0);
                    zext_ln75_reg_320_pp0_iter3_reg(8 downto 0) <= zext_ln75_reg_320_pp0_iter2_reg(8 downto 0);
                    zext_ln75_reg_320_pp0_iter4_reg(8 downto 0) <= zext_ln75_reg_320_pp0_iter3_reg(8 downto 0);
                    zext_ln75_reg_320_pp0_iter5_reg(8 downto 0) <= zext_ln75_reg_320_pp0_iter4_reg(8 downto 0);
                    zext_ln75_reg_320_pp0_iter6_reg(8 downto 0) <= zext_ln75_reg_320_pp0_iter5_reg(8 downto 0);
                    zext_ln75_reg_320_pp0_iter7_reg(8 downto 0) <= zext_ln75_reg_320_pp0_iter6_reg(8 downto 0);
                    zext_ln75_reg_320_pp0_iter8_reg(8 downto 0) <= zext_ln75_reg_320_pp0_iter7_reg(8 downto 0);
                    zext_ln75_reg_320_pp0_iter9_reg(8 downto 0) <= zext_ln75_reg_320_pp0_iter8_reg(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                    conv3_i12_i_i156_cast_reg_296(31 downto 0) <= conv3_i12_i_i156_cast_fu_156_p1(31 downto 0);
                p_hist_0_load_reg_330 <= p_hist_0_q0;
                    sh_prom4_i183_cast_cast_cast_cast_cast_cast_reg_301(31 downto 0) <= sh_prom4_i183_cast_cast_cast_cast_cast_cast_fu_164_p1(31 downto 0);
                    sh_prom4_i_cast_cast_cast_cast_cast_cast_reg_286(31 downto 0) <= sh_prom4_i_cast_cast_cast_cast_cast_cast_fu_144_p1(31 downto 0);
                    sh_prom_i177_cast_cast_cast_cast_cast_cast_reg_306(31 downto 0) <= sh_prom_i177_cast_cast_cast_cast_cast_cast_fu_172_p1(31 downto 0);
                    sh_prom_i_cast_cast_cast_cast_cast_cast_reg_291(31 downto 0) <= sh_prom_i_cast_cast_cast_cast_cast_cast_fu_152_p1(31 downto 0);
                    wdt_1_cast_cast_reg_311(31 downto 0) <= wdt_1_cast_cast_fu_176_p1(31 downto 0);
                    zext_ln75_reg_320_pp0_iter1_reg(8 downto 0) <= zext_ln75_reg_320(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_188_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln75_reg_320(8 downto 0) <= zext_ln75_fu_200_p1(8 downto 0);
            end if;
        end if;
    end process;
    sh_prom4_i_cast_cast_cast_cast_cast_cast_reg_286(76 downto 32) <= "000000000000000000000000000000000000000000000";
    sh_prom_i_cast_cast_cast_cast_cast_cast_reg_291(76 downto 32) <= "000000000000000000000000000000000000000000000";
    conv3_i12_i_i156_cast_reg_296(76 downto 32) <= "000000000000000000000000000000000000000000000";
    sh_prom4_i183_cast_cast_cast_cast_cast_cast_reg_301(76 downto 32) <= "000000000000000000000000000000000000000000000";
    sh_prom_i177_cast_cast_cast_cast_cast_cast_reg_306(76 downto 32) <= "000000000000000000000000000000000000000000000";
    wdt_1_cast_cast_reg_311(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln75_reg_320(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln75_reg_320_pp0_iter1_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln75_reg_320_pp0_iter2_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln75_reg_320_pp0_iter3_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln75_reg_320_pp0_iter4_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln75_reg_320_pp0_iter5_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln75_reg_320_pp0_iter6_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln75_reg_320_pp0_iter7_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln75_reg_320_pp0_iter8_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln75_reg_320_pp0_iter9_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln75_reg_320_pp0_iter10_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    HistArray_address0 <= zext_ln75_reg_320_pp0_iter10_reg(8 - 1 downto 0);

    HistArray_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            HistArray_ce0 <= ap_const_logic_1;
        else 
            HistArray_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    HistArray_d0 <= select_ln81_reg_361;

    HistArray_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            HistArray_we0 <= ap_const_logic_1;
        else 
            HistArray_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln75_fu_194_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_3) + unsigned(ap_const_lv9_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln75_fu_188_p2)
    begin
        if (((icmp_ln75_fu_188_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_54, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_3 <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_i_3 <= i_fu_54;
        end if; 
    end process;

    conv3_i12_i_i156_cast_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv3_i12_i_i156),77));
    grp_fu_136_p0 <= grp_fu_136_p00(45 - 1 downto 0);
    grp_fu_136_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_reg_345),77));
    grp_fu_136_p1 <= conv3_i12_i_i156_cast_reg_296(32 - 1 downto 0);
    grp_fu_654_p_ce <= ap_const_logic_1;
    grp_fu_654_p_din0 <= zext_ln80_fu_210_p1(32 - 1 downto 0);
    grp_fu_654_p_din1 <= wdt_1_cast_cast_reg_311(32 - 1 downto 0);
    icmp_ln75_fu_188_p2 <= "1" when (ap_sig_allocacmp_i_3 = ap_const_lv9_100) else "0";
    lshr_ln80_fu_217_p2 <= std_logic_vector(shift_right(unsigned(zext_ln80_1_fu_214_p1),to_integer(unsigned('0' & sh_prom_i177_cast_cast_cast_cast_cast_cast_reg_306(31-1 downto 0)))));
    lshr_ln81_fu_246_p2 <= std_logic_vector(shift_right(unsigned(mul_ln81_reg_355),to_integer(unsigned('0' & sh_prom_i_cast_cast_cast_cast_cast_cast_reg_291(31-1 downto 0)))));
    p_hist_0_address0 <= zext_ln75_fu_200_p1(8 - 1 downto 0);

    p_hist_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_hist_0_ce0 <= ap_const_logic_1;
        else 
            p_hist_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln81_fu_262_p3 <= 
        trunc_ln81_fu_254_p1 when (cmp_i(0) = '1') else 
        trunc_ln81_1_fu_258_p1;
    sh_prom4_i183_cast_cast_cast_cast_cast_cast_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom4_i183_cast_cast_cast_cast_cast_fu_160_p1),77));
        sh_prom4_i183_cast_cast_cast_cast_cast_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_prom4_i183_cast_cast_cast_cast),32));

    sh_prom4_i_cast_cast_cast_cast_cast_cast_fu_144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom4_i_cast_cast_cast_cast_cast_fu_140_p1),77));
        sh_prom4_i_cast_cast_cast_cast_cast_fu_140_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_prom4_i_cast_cast_cast_cast),32));

    sh_prom_i177_cast_cast_cast_cast_cast_cast_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i177_cast_cast_cast_cast_cast_fu_168_p1),77));
        sh_prom_i177_cast_cast_cast_cast_cast_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_prom_i177_cast_cast_cast_cast),32));

    sh_prom_i_cast_cast_cast_cast_cast_cast_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_cast_cast_cast_cast_cast_fu_148_p1),77));
        sh_prom_i_cast_cast_cast_cast_cast_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_prom_i_cast_cast_cast_cast),32));

    shl_ln80_fu_222_p2 <= std_logic_vector(shift_left(unsigned(zext_ln80_1_fu_214_p1),to_integer(unsigned('0' & sh_prom4_i183_cast_cast_cast_cast_cast_cast_reg_301(31-1 downto 0)))));
    shl_ln81_fu_250_p2 <= std_logic_vector(shift_left(unsigned(mul_ln81_reg_355),to_integer(unsigned('0' & sh_prom4_i_cast_cast_cast_cast_cast_cast_reg_286(31-1 downto 0)))));
    tmp2_fu_235_p3 <= 
        trunc_ln80_fu_227_p1 when (cmp_i174(0) = '1') else 
        trunc_ln80_1_fu_231_p1;
    trunc_ln80_1_fu_231_p1 <= shl_ln80_fu_222_p2(45 - 1 downto 0);
    trunc_ln80_fu_227_p1 <= lshr_ln80_fu_217_p2(45 - 1 downto 0);
    trunc_ln81_1_fu_258_p1 <= shl_ln81_fu_250_p2(33 - 1 downto 0);
    trunc_ln81_fu_254_p1 <= lshr_ln81_fu_246_p2(33 - 1 downto 0);
    wdt_1_cast_cast_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wdt_1_cast),64));
    zext_ln75_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_3),64));
    zext_ln80_1_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln80_reg_340),77));
    zext_ln80_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_hist_0_load_reg_330),64));
end behav;
