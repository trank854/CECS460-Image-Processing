-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Otsu_xfOtsuKernel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_hist_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_hist_0_ce0 : OUT STD_LOGIC;
    p_hist_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of Otsu_xfOtsuKernel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv16_500 : STD_LOGIC_VECTOR (15 downto 0) := "0000010100000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv16_2D0 : STD_LOGIC_VECTOR (15 downto 0) := "0000001011010000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv32_2D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011010000";
    constant ap_const_lv8_18 : STD_LOGIC_VECTOR (7 downto 0) := "00011000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_68 : STD_LOGIC_VECTOR (6 downto 0) := "1101000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_C : STD_LOGIC_VECTOR (6 downto 0) := "0001100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_A : STD_LOGIC_VECTOR (8 downto 0) := "000001010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal wdt_reg_503 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln50_fu_157_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln50_reg_510 : STD_LOGIC_VECTOR (6 downto 0);
    signal hgt_reg_515 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln51_fu_169_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln51_reg_522 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln53_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_reg_527 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_179_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_reg_534 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln56_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_539 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln57_fu_203_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln57_reg_545 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln60_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_550 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_215_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_reg_557 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln63_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_562 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln64_fu_239_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln64_reg_568 : STD_LOGIC_VECTOR (7 downto 0);
    signal wdt_4_fu_294_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal wdt_4_reg_573 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal hgt_4_fu_351_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal hgt_4_reg_580 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln56_fu_359_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln56_reg_586 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln63_fu_367_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln63_reg_592 : STD_LOGIC_VECTOR (6 downto 0);
    signal rev_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_reg_598 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev32_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev32_reg_603 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_i182_fu_413_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_i182_reg_608 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_i_fu_420_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_i_reg_613 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_fu_427_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_reg_618 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln72_1_fu_458_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln72_1_reg_625 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_144_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln71_reg_630 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal trunc_ln72_fu_470_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln72_reg_635 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal total_fu_138_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal total_reg_643 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add121_fu_481_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add121_reg_649 : STD_LOGIC_VECTOR (8 downto 0);
    signal HistArray_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal HistArray_ce0 : STD_LOGIC;
    signal HistArray_we0 : STD_LOGIC;
    signal HistArray_d0 : STD_LOGIC_VECTOR (32 downto 0);
    signal HistArray_q0 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_Inverse_fu_83_ap_start : STD_LOGIC;
    signal grp_Inverse_fu_83_ap_done : STD_LOGIC;
    signal grp_Inverse_fu_83_ap_idle : STD_LOGIC;
    signal grp_Inverse_fu_83_ap_ready : STD_LOGIC;
    signal grp_Inverse_fu_83_ap_ce : STD_LOGIC;
    signal grp_Inverse_fu_83_x : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Inverse_fu_83_M : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Inverse_fu_83_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Inverse_fu_83_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Inverse_fu_93_ap_start : STD_LOGIC;
    signal grp_Inverse_fu_93_ap_done : STD_LOGIC;
    signal grp_Inverse_fu_93_ap_idle : STD_LOGIC;
    signal grp_Inverse_fu_93_ap_ready : STD_LOGIC;
    signal grp_Inverse_fu_93_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Inverse_fu_93_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_ap_start : STD_LOGIC;
    signal grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_ap_done : STD_LOGIC;
    signal grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_ap_idle : STD_LOGIC;
    signal grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_ap_ready : STD_LOGIC;
    signal grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_p_hist_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_p_hist_0_ce0 : STD_LOGIC;
    signal grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_HistArray_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_HistArray_ce0 : STD_LOGIC;
    signal grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_HistArray_we0 : STD_LOGIC;
    signal grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_HistArray_d0 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_grp_fu_654_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_grp_fu_654_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_grp_fu_654_p_ce : STD_LOGIC;
    signal grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_ap_start : STD_LOGIC;
    signal grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_ap_done : STD_LOGIC;
    signal grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_ap_idle : STD_LOGIC;
    signal grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_ap_ready : STD_LOGIC;
    signal grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_HistArray_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_HistArray_ce0 : STD_LOGIC;
    signal grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_sum_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_sum_out_ap_vld : STD_LOGIC;
    signal grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_ap_start : STD_LOGIC;
    signal grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_ap_done : STD_LOGIC;
    signal grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_ap_idle : STD_LOGIC;
    signal grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_ap_ready : STD_LOGIC;
    signal grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_HistArray_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_HistArray_ce0 : STD_LOGIC;
    signal grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_max_val_2_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_max_val_2_out_ap_vld : STD_LOGIC;
    signal grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_grp_Inverse_fu_83_p_din1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_grp_Inverse_fu_83_p_din2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_grp_Inverse_fu_83_p_ce : STD_LOGIC;
    signal grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_grp_Inverse_fu_83_p_start : STD_LOGIC;
    signal grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_grp_fu_654_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_grp_fu_654_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_grp_fu_654_p_ce : STD_LOGIC;
    signal grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_ap_start_reg : STD_LOGIC := '0';
    signal grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_ap_start_reg : STD_LOGIC := '0';
    signal grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal max_val_2_loc_fu_56 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_144_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln_fu_189_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln1_fu_225_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln54_fu_245_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln54_fu_250_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln57_fu_259_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln56_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wdt_1_fu_254_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal wdt_2_fu_262_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln53_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln56_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wdt_3_fu_277_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln61_fu_302_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln61_fu_307_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln64_fu_316_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln63_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal hgt_1_fu_311_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal hgt_2_fu_319_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln60_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln63_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal hgt_3_fu_334_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln56_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln63_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_383_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_398_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln71_1_fu_375_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln35_fu_379_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln70_fu_436_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln70_1_fu_441_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_fu_446_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln70_fu_433_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln70_fu_452_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln71_fu_462_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln71_fu_465_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln100_fu_478_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_144_ce : STD_LOGIC;
    signal grp_fu_654_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_654_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_654_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_654_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Otsu_Inverse IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (15 downto 0);
        M : IN STD_LOGIC_VECTOR (4 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Otsu_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_hist_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_hist_0_ce0 : OUT STD_LOGIC;
        p_hist_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        wdt_1_cast : IN STD_LOGIC_VECTOR (31 downto 0);
        sh_prom_i177_cast_cast_cast_cast : IN STD_LOGIC_VECTOR (6 downto 0);
        sh_prom4_i183_cast_cast_cast_cast : IN STD_LOGIC_VECTOR (7 downto 0);
        cmp_i174 : IN STD_LOGIC_VECTOR (0 downto 0);
        conv3_i12_i_i156 : IN STD_LOGIC_VECTOR (31 downto 0);
        sh_prom_i_cast_cast_cast_cast : IN STD_LOGIC_VECTOR (6 downto 0);
        sh_prom4_i_cast_cast_cast_cast : IN STD_LOGIC_VECTOR (7 downto 0);
        cmp_i : IN STD_LOGIC_VECTOR (0 downto 0);
        HistArray_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        HistArray_ce0 : OUT STD_LOGIC;
        HistArray_we0 : OUT STD_LOGIC;
        HistArray_d0 : OUT STD_LOGIC_VECTOR (32 downto 0);
        grp_fu_654_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_654_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_654_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_654_p_ce : OUT STD_LOGIC );
    end component;


    component Otsu_xfOtsuKernel_Pipeline_SUM_LOOP IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        HistArray_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        HistArray_ce0 : OUT STD_LOGIC;
        HistArray_q0 : IN STD_LOGIC_VECTOR (32 downto 0);
        sum_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        sum_out_ap_vld : OUT STD_LOGIC );
    end component;


    component Otsu_xfOtsuKernel_Pipeline_THRESHOLD_LOOP IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        HistArray_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        HistArray_ce0 : OUT STD_LOGIC;
        HistArray_q0 : IN STD_LOGIC_VECTOR (32 downto 0);
        total : IN STD_LOGIC_VECTOR (24 downto 0);
        zext_ln104 : IN STD_LOGIC_VECTOR (24 downto 0);
        sh_prom_cast_cast_cast_cast : IN STD_LOGIC_VECTOR (7 downto 0);
        conv106 : IN STD_LOGIC_VECTOR (31 downto 0);
        sh_prom122_cast_cast_cast_cast : IN STD_LOGIC_VECTOR (8 downto 0);
        sext_ln100 : IN STD_LOGIC_VECTOR (7 downto 0);
        max_val_2_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_val_2_out_ap_vld : OUT STD_LOGIC;
        grp_Inverse_fu_83_p_din1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        grp_Inverse_fu_83_p_din2 : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_Inverse_fu_83_p_dout0_0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_Inverse_fu_83_p_dout0_1 : IN STD_LOGIC_VECTOR (7 downto 0);
        grp_Inverse_fu_83_p_ce : OUT STD_LOGIC;
        grp_Inverse_fu_83_p_start : OUT STD_LOGIC;
        grp_Inverse_fu_83_p_ready : IN STD_LOGIC;
        grp_Inverse_fu_83_p_done : IN STD_LOGIC;
        grp_Inverse_fu_83_p_idle : IN STD_LOGIC;
        grp_fu_654_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_654_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_654_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_654_p_ce : OUT STD_LOGIC );
    end component;


    component Otsu_mul_25s_25s_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component Otsu_mul_32s_11ns_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Otsu_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Otsu_xfOtsuKernel_HistArray_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (32 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;



begin
    HistArray_U : component Otsu_xfOtsuKernel_HistArray_RAM_AUTO_1R1W
    generic map (
        DataWidth => 33,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => HistArray_address0,
        ce0 => HistArray_ce0,
        we0 => HistArray_we0,
        d0 => HistArray_d0,
        q0 => HistArray_q0);

    grp_Inverse_fu_83 : component Otsu_Inverse
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Inverse_fu_83_ap_start,
        ap_done => grp_Inverse_fu_83_ap_done,
        ap_idle => grp_Inverse_fu_83_ap_idle,
        ap_ready => grp_Inverse_fu_83_ap_ready,
        ap_ce => grp_Inverse_fu_83_ap_ce,
        x => grp_Inverse_fu_83_x,
        M => grp_Inverse_fu_83_M,
        ap_return_0 => grp_Inverse_fu_83_ap_return_0,
        ap_return_1 => grp_Inverse_fu_83_ap_return_1);

    grp_Inverse_fu_93 : component Otsu_Inverse
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Inverse_fu_93_ap_start,
        ap_done => grp_Inverse_fu_93_ap_done,
        ap_idle => grp_Inverse_fu_93_ap_idle,
        ap_ready => grp_Inverse_fu_93_ap_ready,
        ap_ce => ap_const_logic_1,
        x => ap_const_lv16_2D0,
        M => ap_const_lv5_10,
        ap_return_0 => grp_Inverse_fu_93_ap_return_0,
        ap_return_1 => grp_Inverse_fu_93_ap_return_1);

    grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103 : component Otsu_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_ap_start,
        ap_done => grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_ap_done,
        ap_idle => grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_ap_idle,
        ap_ready => grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_ap_ready,
        p_hist_0_address0 => grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_p_hist_0_address0,
        p_hist_0_ce0 => grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_p_hist_0_ce0,
        p_hist_0_q0 => p_hist_0_q0,
        wdt_1_cast => wdt_4_reg_573,
        sh_prom_i177_cast_cast_cast_cast => select_ln56_reg_586,
        sh_prom4_i183_cast_cast_cast_cast => sub_i182_reg_608,
        cmp_i174 => rev_reg_598,
        conv3_i12_i_i156 => hgt_4_reg_580,
        sh_prom_i_cast_cast_cast_cast => select_ln63_reg_592,
        sh_prom4_i_cast_cast_cast_cast => sub_i_reg_613,
        cmp_i => rev32_reg_603,
        HistArray_address0 => grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_HistArray_address0,
        HistArray_ce0 => grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_HistArray_ce0,
        HistArray_we0 => grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_HistArray_we0,
        HistArray_d0 => grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_HistArray_d0,
        grp_fu_654_p_din0 => grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_grp_fu_654_p_din0,
        grp_fu_654_p_din1 => grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_grp_fu_654_p_din1,
        grp_fu_654_p_dout0 => grp_fu_654_p2,
        grp_fu_654_p_ce => grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_grp_fu_654_p_ce);

    grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118 : component Otsu_xfOtsuKernel_Pipeline_SUM_LOOP
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_ap_start,
        ap_done => grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_ap_done,
        ap_idle => grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_ap_idle,
        ap_ready => grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_ap_ready,
        HistArray_address0 => grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_HistArray_address0,
        HistArray_ce0 => grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_HistArray_ce0,
        HistArray_q0 => HistArray_q0,
        sum_out => grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_sum_out,
        sum_out_ap_vld => grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_sum_out_ap_vld);

    grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124 : component Otsu_xfOtsuKernel_Pipeline_THRESHOLD_LOOP
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_ap_start,
        ap_done => grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_ap_done,
        ap_idle => grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_ap_idle,
        ap_ready => grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_ap_ready,
        HistArray_address0 => grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_HistArray_address0,
        HistArray_ce0 => grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_HistArray_ce0,
        HistArray_q0 => HistArray_q0,
        total => total_reg_643,
        zext_ln104 => total_reg_643,
        sh_prom_cast_cast_cast_cast => add_reg_618,
        conv106 => grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_sum_out,
        sh_prom122_cast_cast_cast_cast => add121_reg_649,
        sext_ln100 => add_reg_618,
        max_val_2_out => grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_max_val_2_out,
        max_val_2_out_ap_vld => grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_max_val_2_out_ap_vld,
        grp_Inverse_fu_83_p_din1 => grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_grp_Inverse_fu_83_p_din1,
        grp_Inverse_fu_83_p_din2 => grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_grp_Inverse_fu_83_p_din2,
        grp_Inverse_fu_83_p_dout0_0 => grp_Inverse_fu_83_ap_return_0,
        grp_Inverse_fu_83_p_dout0_1 => grp_Inverse_fu_83_ap_return_1,
        grp_Inverse_fu_83_p_ce => grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_grp_Inverse_fu_83_p_ce,
        grp_Inverse_fu_83_p_start => grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_grp_Inverse_fu_83_p_start,
        grp_Inverse_fu_83_p_ready => grp_Inverse_fu_83_ap_ready,
        grp_Inverse_fu_83_p_done => grp_Inverse_fu_83_ap_done,
        grp_Inverse_fu_83_p_idle => grp_Inverse_fu_83_ap_idle,
        grp_fu_654_p_din0 => grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_grp_fu_654_p_din0,
        grp_fu_654_p_din1 => grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_grp_fu_654_p_din1,
        grp_fu_654_p_dout0 => grp_fu_654_p2,
        grp_fu_654_p_ce => grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_grp_fu_654_p_ce);

    mul_25s_25s_25_1_1_U116 : component Otsu_mul_25s_25s_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 25,
        dout_WIDTH => 25)
    port map (
        din0 => trunc_ln72_reg_635,
        din1 => trunc_ln72_1_reg_625,
        dout => total_fu_138_p2);

    mul_32s_11ns_32_2_1_U117 : component Otsu_mul_32s_11ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 11,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => hgt_4_reg_580,
        din1 => grp_fu_144_p1,
        ce => grp_fu_144_ce,
        dout => grp_fu_144_p2);

    mul_32ns_32ns_64_2_1_U118 : component Otsu_mul_32ns_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_654_p0,
        din1 => grp_fu_654_p1,
        ce => grp_fu_654_ce,
        dout => grp_fu_654_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_ap_ready = ap_const_logic_1)) then 
                    grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_ap_ready = ap_const_logic_1)) then 
                    grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_ap_ready = ap_const_logic_1)) then 
                    grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add121_reg_649 <= add121_fu_481_p2;
                total_reg_643 <= total_fu_138_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_reg_618 <= add_fu_427_p2;
                hgt_4_reg_580 <= hgt_4_fu_351_p3;
                rev32_reg_603 <= rev32_fu_406_p2;
                rev_reg_598 <= rev_fu_391_p2;
                select_ln56_reg_586 <= select_ln56_fu_359_p3;
                select_ln63_reg_592 <= select_ln63_fu_367_p3;
                sub_i182_reg_608 <= sub_i182_fu_413_p2;
                sub_i_reg_613 <= sub_i_fu_420_p2;
                wdt_4_reg_573 <= wdt_4_fu_294_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                hgt_reg_515 <= grp_Inverse_fu_93_ap_return_0;
                icmp_ln53_reg_527 <= icmp_ln53_fu_173_p2;
                icmp_ln56_reg_539 <= icmp_ln56_fu_197_p2;
                icmp_ln60_reg_550 <= icmp_ln60_fu_209_p2;
                icmp_ln63_reg_562 <= icmp_ln63_fu_233_p2;
                sub_ln57_reg_545 <= sub_ln57_fu_203_p2;
                sub_ln64_reg_568 <= sub_ln64_fu_239_p2;
                tmp_1_reg_557 <= grp_Inverse_fu_93_ap_return_1(7 downto 1);
                tmp_reg_534 <= grp_Inverse_fu_83_ap_return_1(7 downto 1);
                trunc_ln50_reg_510 <= trunc_ln50_fu_157_p1;
                trunc_ln51_reg_522 <= trunc_ln51_fu_169_p1;
                wdt_reg_503 <= grp_Inverse_fu_83_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_max_val_2_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                max_val_2_loc_fu_56 <= grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_max_val_2_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                mul_ln71_reg_630 <= grp_fu_144_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                trunc_ln72_1_reg_625 <= trunc_ln72_1_fu_458_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                trunc_ln72_reg_635 <= trunc_ln72_fu_470_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state8, grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_ap_done, grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_ap_done, grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_ap_done, ap_CS_fsm_state10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;

    HistArray_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state8, grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_HistArray_address0, grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_HistArray_address0, grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_HistArray_address0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            HistArray_address0 <= ap_const_lv64_0(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            HistArray_address0 <= grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_HistArray_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            HistArray_address0 <= grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_HistArray_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            HistArray_address0 <= grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_HistArray_address0;
        else 
            HistArray_address0 <= "XXXXXXXX";
        end if; 
    end process;


    HistArray_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state8, grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_HistArray_ce0, grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_HistArray_ce0, grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_HistArray_ce0, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            HistArray_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            HistArray_ce0 <= grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_HistArray_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            HistArray_ce0 <= grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_HistArray_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            HistArray_ce0 <= grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_HistArray_ce0;
        else 
            HistArray_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    HistArray_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state6, grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_HistArray_d0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            HistArray_d0 <= ap_const_lv33_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            HistArray_d0 <= grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_HistArray_d0;
        else 
            HistArray_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    HistArray_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_HistArray_we0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            HistArray_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            HistArray_we0 <= grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_HistArray_we0;
        else 
            HistArray_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add121_fu_481_p2 <= std_logic_vector(signed(sext_ln100_fu_478_p1) + signed(ap_const_lv9_A));
    add_fu_427_p2 <= std_logic_vector(signed(sext_ln35_fu_379_p1) + signed(sext_ln71_1_fu_375_p1));
    add_ln54_fu_245_p2 <= std_logic_vector(unsigned(trunc_ln50_reg_510) + unsigned(ap_const_lv7_68));
    add_ln61_fu_302_p2 <= std_logic_vector(unsigned(trunc_ln51_reg_522) + unsigned(ap_const_lv7_68));
    add_ln70_fu_446_p2 <= std_logic_vector(unsigned(shl_ln70_fu_436_p2) + unsigned(shl_ln70_1_fu_441_p2));
    and_ln1_fu_225_p3 <= (tmp_1_fu_215_p4 & ap_const_lv1_0);
    and_ln56_fu_289_p2 <= (xor_ln53_fu_284_p2 and icmp_ln56_reg_539);
    and_ln63_fu_346_p2 <= (xor_ln60_fu_341_p2 and icmp_ln63_reg_562);
    and_ln_fu_189_p3 <= (tmp_fu_179_p4 & ap_const_lv1_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_ap_done)
    begin
        if ((grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_ap_done)
    begin
        if ((grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_ap_done)
    begin
        if ((grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= max_val_2_loc_fu_56;

    grp_Inverse_fu_83_M_assign_proc : process(ap_CS_fsm_state1, grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_grp_Inverse_fu_83_p_din2, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_Inverse_fu_83_M <= grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_grp_Inverse_fu_83_p_din2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_Inverse_fu_83_M <= ap_const_lv5_10;
        else 
            grp_Inverse_fu_83_M <= "XXXXX";
        end if; 
    end process;


    grp_Inverse_fu_83_ap_ce_assign_proc : process(grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_grp_Inverse_fu_83_p_ce, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_Inverse_fu_83_ap_ce <= grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_grp_Inverse_fu_83_p_ce;
        else 
            grp_Inverse_fu_83_ap_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_Inverse_fu_83_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_grp_Inverse_fu_83_p_start, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_Inverse_fu_83_ap_start <= grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_grp_Inverse_fu_83_p_start;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            grp_Inverse_fu_83_ap_start <= ap_const_logic_1;
        else 
            grp_Inverse_fu_83_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_Inverse_fu_83_x_assign_proc : process(ap_CS_fsm_state1, grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_grp_Inverse_fu_83_p_din1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_Inverse_fu_83_x <= grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_grp_Inverse_fu_83_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_Inverse_fu_83_x <= ap_const_lv16_500;
        else 
            grp_Inverse_fu_83_x <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_Inverse_fu_93_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            grp_Inverse_fu_93_ap_start <= ap_const_logic_1;
        else 
            grp_Inverse_fu_93_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_144_ce_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_ap_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_ap_done = ap_const_logic_1)))) then 
            grp_fu_144_ce <= ap_const_logic_1;
        else 
            grp_fu_144_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_144_p1 <= ap_const_lv32_2D0(11 - 1 downto 0);

    grp_fu_654_ce_assign_proc : process(ap_CS_fsm_state6, grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_grp_fu_654_p_ce, grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_grp_fu_654_p_ce, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_654_ce <= grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_grp_fu_654_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_654_ce <= grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_grp_fu_654_p_ce;
        else 
            grp_fu_654_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_654_p0_assign_proc : process(ap_CS_fsm_state6, grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_grp_fu_654_p_din0, grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_grp_fu_654_p_din0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_654_p0 <= grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_grp_fu_654_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_654_p0 <= grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_grp_fu_654_p_din0;
        else 
            grp_fu_654_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_654_p1_assign_proc : process(ap_CS_fsm_state6, grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_grp_fu_654_p_din1, grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_grp_fu_654_p_din1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_654_p1 <= grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_grp_fu_654_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_654_p1 <= grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_grp_fu_654_p_din1;
        else 
            grp_fu_654_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_ap_start <= grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_ap_start_reg;
    grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_ap_start <= grp_xfOtsuKernel_Pipeline_SUM_LOOP_fu_118_ap_start_reg;
    grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_ap_start <= grp_xfOtsuKernel_Pipeline_THRESHOLD_LOOP_fu_124_ap_start_reg;
    hgt_1_fu_311_p2 <= std_logic_vector(shift_right(unsigned(hgt_reg_515),to_integer(unsigned('0' & zext_ln61_fu_307_p1(31-1 downto 0)))));
    hgt_2_fu_319_p2 <= std_logic_vector(shift_left(unsigned(hgt_reg_515),to_integer(unsigned('0' & zext_ln64_fu_316_p1(31-1 downto 0)))));
    hgt_3_fu_334_p3 <= 
        hgt_1_fu_311_p2 when (icmp_ln60_reg_550(0) = '1') else 
        hgt_2_fu_319_p2;
    hgt_4_fu_351_p3 <= 
        hgt_reg_515 when (and_ln63_fu_346_p2(0) = '1') else 
        hgt_3_fu_334_p3;
    icmp_ln53_fu_173_p2 <= "1" when (signed(grp_Inverse_fu_83_ap_return_1) > signed(ap_const_lv8_18)) else "0";
    icmp_ln56_fu_197_p2 <= "1" when (and_ln_fu_189_p3 = grp_Inverse_fu_83_ap_return_1) else "0";
    icmp_ln60_fu_209_p2 <= "1" when (signed(grp_Inverse_fu_93_ap_return_1) > signed(ap_const_lv8_18)) else "0";
    icmp_ln63_fu_233_p2 <= "1" when (and_ln1_fu_225_p3 = grp_Inverse_fu_93_ap_return_1) else "0";
    lshr_ln70_fu_452_p2 <= std_logic_vector(shift_right(unsigned(add_ln70_fu_446_p2),to_integer(unsigned('0' & sext_ln70_fu_433_p1(31-1 downto 0)))));
    lshr_ln71_fu_465_p2 <= std_logic_vector(shift_right(unsigned(mul_ln71_reg_630),to_integer(unsigned('0' & sext_ln71_fu_462_p1(31-1 downto 0)))));
    or_ln56_fu_272_p2 <= (xor_ln56_fu_267_p2 or icmp_ln53_reg_527);
    or_ln63_fu_329_p2 <= (xor_ln63_fu_324_p2 or icmp_ln60_reg_550);
    p_hist_0_address0 <= grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_p_hist_0_address0;
    p_hist_0_ce0 <= grp_xfOtsuKernel_Pipeline_HISTOGRAM_NORM_LOOP_fu_103_p_hist_0_ce0;
    rev32_fu_406_p2 <= (tmp_3_fu_398_p3 xor ap_const_lv1_1);
    rev_fu_391_p2 <= (tmp_2_fu_383_p3 xor ap_const_lv1_1);
    select_ln56_fu_359_p3 <= 
        ap_const_lv7_C when (or_ln56_fu_272_p2(0) = '1') else 
        tmp_reg_534;
    select_ln63_fu_367_p3 <= 
        ap_const_lv7_C when (or_ln63_fu_329_p2(0) = '1') else 
        tmp_1_reg_557;
        sext_ln100_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_reg_618),9));

        sext_ln35_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln63_fu_367_p3),8));

        sext_ln70_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln56_reg_586),32));

        sext_ln71_1_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln56_fu_359_p3),8));

        sext_ln71_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln63_reg_592),32));

    shl_ln70_1_fu_441_p2 <= std_logic_vector(shift_left(unsigned(wdt_4_reg_573),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    shl_ln70_fu_436_p2 <= std_logic_vector(shift_left(unsigned(wdt_4_reg_573),to_integer(unsigned('0' & ap_const_lv32_A(31-1 downto 0)))));
    sub_i182_fu_413_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(sext_ln71_1_fu_375_p1));
    sub_i_fu_420_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(sext_ln35_fu_379_p1));
    sub_ln57_fu_203_p2 <= std_logic_vector(unsigned(ap_const_lv8_18) - unsigned(grp_Inverse_fu_83_ap_return_1));
    sub_ln64_fu_239_p2 <= std_logic_vector(unsigned(ap_const_lv8_18) - unsigned(grp_Inverse_fu_93_ap_return_1));
    tmp_1_fu_215_p4 <= grp_Inverse_fu_93_ap_return_1(7 downto 1);
    tmp_2_fu_383_p3 <= select_ln56_fu_359_p3(6 downto 6);
    tmp_3_fu_398_p3 <= select_ln63_fu_367_p3(6 downto 6);
    tmp_fu_179_p4 <= grp_Inverse_fu_83_ap_return_1(7 downto 1);
    trunc_ln50_fu_157_p1 <= grp_Inverse_fu_83_ap_return_1(7 - 1 downto 0);
    trunc_ln51_fu_169_p1 <= grp_Inverse_fu_93_ap_return_1(7 - 1 downto 0);
    trunc_ln72_1_fu_458_p1 <= lshr_ln70_fu_452_p2(25 - 1 downto 0);
    trunc_ln72_fu_470_p1 <= lshr_ln71_fu_465_p2(25 - 1 downto 0);
    wdt_1_fu_254_p2 <= std_logic_vector(shift_right(unsigned(wdt_reg_503),to_integer(unsigned('0' & zext_ln54_fu_250_p1(31-1 downto 0)))));
    wdt_2_fu_262_p2 <= std_logic_vector(shift_left(unsigned(wdt_reg_503),to_integer(unsigned('0' & zext_ln57_fu_259_p1(31-1 downto 0)))));
    wdt_3_fu_277_p3 <= 
        wdt_1_fu_254_p2 when (icmp_ln53_reg_527(0) = '1') else 
        wdt_2_fu_262_p2;
    wdt_4_fu_294_p3 <= 
        wdt_reg_503 when (and_ln56_fu_289_p2(0) = '1') else 
        wdt_3_fu_277_p3;
    xor_ln53_fu_284_p2 <= (icmp_ln53_reg_527 xor ap_const_lv1_1);
    xor_ln56_fu_267_p2 <= (icmp_ln56_reg_539 xor ap_const_lv1_1);
    xor_ln60_fu_341_p2 <= (icmp_ln60_reg_550 xor ap_const_lv1_1);
    xor_ln63_fu_324_p2 <= (icmp_ln63_reg_562 xor ap_const_lv1_1);
    zext_ln54_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_fu_245_p2),32));
    zext_ln57_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln57_reg_545),32));
    zext_ln61_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln61_fu_302_p2),32));
    zext_ln64_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln64_reg_568),32));
end behav;
