// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module Otsu_Inverse (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        x,
        M,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [15:0] x;
input  [4:0] M;
output  [31:0] ap_return_0;
output  [7:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [9:0] xf_cv_division_lut_address0;
reg    xf_cv_division_lut_ce0;
wire   [15:0] xf_cv_division_lut_q0;
reg   [4:0] M_read_reg_376;
wire    ap_block_pp0_stage0_11001;
reg   [15:0] x_read_reg_381;
reg   [15:0] x_read_reg_381_pp0_iter1_reg;
wire   [0:0] icmp_ln2970_fu_131_p2;
reg   [0:0] icmp_ln2970_reg_386;
wire   [0:0] icmp_ln2976_fu_137_p2;
reg   [0:0] icmp_ln2976_reg_391;
wire   [0:0] icmp_ln2973_fu_157_p2;
reg   [0:0] icmp_ln2973_reg_396;
reg   [0:0] tmp_reg_401;
wire   [0:0] icmp_ln2991_fu_197_p2;
reg   [0:0] icmp_ln2991_reg_407;
wire   [0:0] icmp_ln2993_fu_213_p2;
reg   [0:0] icmp_ln2993_reg_412;
wire   [0:0] icmp_ln2995_fu_219_p2;
reg   [0:0] icmp_ln2995_reg_417;
wire   [4:0] add_ln3000_fu_312_p2;
reg   [4:0] add_ln3000_reg_422;
wire   [5:0] sub_ln3003_fu_324_p2;
reg   [5:0] sub_ln3003_reg_427;
reg   [5:0] sub_ln3003_reg_427_pp0_iter2_reg;
wire   [63:0] zext_ln3002_fu_352_p1;
wire    ap_block_pp0_stage0;
wire   [3:0] trunc_ln_fu_101_p4;
wire   [3:0] x3_fu_121_p4;
wire   [3:0] x4_fu_97_p1;
wire   [3:0] x2_fu_111_p4;
wire   [3:0] or_ln2973_fu_151_p2;
wire   [3:0] x_sel_2_fu_143_p3;
wire   [3:0] select_ln2973_1_fu_163_p3;
wire   [3:0] x_sel_fu_171_p3;
wire   [1:0] tmp_4_fu_187_p4;
wire   [2:0] tmp_5_fu_203_p4;
wire   [3:0] block_fu_228_p3;
wire   [3:0] select_ln2973_fu_235_p3;
wire   [3:0] block_1_fu_242_p3;
wire   [2:0] select_ln2993_fu_253_p3;
wire   [0:0] xor_ln2989_fu_267_p2;
wire   [0:0] and_ln2991_fu_272_p2;
wire   [0:0] or_ln2991_fu_285_p2;
wire   [2:0] select_ln2991_fu_277_p3;
wire   [2:0] pos_fu_260_p3;
wire   [2:0] pos_1_fu_290_p3;
wire   [4:0] zext_ln2969_fu_249_p1;
wire   [4:0] zext_ln2959_fu_298_p1;
wire   [4:0] B_L_fu_302_p2;
wire   [5:0] zext_ln2952_fu_225_p1;
wire   [5:0] add_ln3003_fu_318_p2;
wire   [5:0] zext_ln2956_fu_308_p1;
wire   [31:0] zext_ln2962_fu_330_p1;
wire  signed [31:0] sext_ln3000_fu_333_p1;
wire   [31:0] shl_ln3000_fu_336_p2;
wire   [9:0] index_fu_342_p4;
wire   [31:0] zext_ln3002_1_fu_357_p1;
wire   [7:0] zext_ln3003_fu_361_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

Otsu_Inverse_xf_cv_division_lut_ROM_AUTO_1R #(
    .DataWidth( 16 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
xf_cv_division_lut_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(xf_cv_division_lut_address0),
    .ce0(xf_cv_division_lut_ce0),
    .q0(xf_cv_division_lut_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        M_read_reg_376 <= M;
        add_ln3000_reg_422 <= add_ln3000_fu_312_p2;
        icmp_ln2970_reg_386 <= icmp_ln2970_fu_131_p2;
        icmp_ln2973_reg_396 <= icmp_ln2973_fu_157_p2;
        icmp_ln2976_reg_391 <= icmp_ln2976_fu_137_p2;
        icmp_ln2991_reg_407 <= icmp_ln2991_fu_197_p2;
        icmp_ln2993_reg_412 <= icmp_ln2993_fu_213_p2;
        icmp_ln2995_reg_417 <= icmp_ln2995_fu_219_p2;
        sub_ln3003_reg_427 <= sub_ln3003_fu_324_p2;
        tmp_reg_401 <= x_sel_fu_171_p3[32'd3];
        x_read_reg_381 <= x;
        x_read_reg_381_pp0_iter1_reg <= x_read_reg_381;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        sub_ln3003_reg_427_pp0_iter2_reg <= sub_ln3003_reg_427;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_ce))) begin
        xf_cv_division_lut_ce0 = 1'b1;
    end else begin
        xf_cv_division_lut_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_L_fu_302_p2 = (zext_ln2969_fu_249_p1 + zext_ln2959_fu_298_p1);

assign add_ln3000_fu_312_p2 = ($signed(B_L_fu_302_p2) + $signed(5'd31));

assign add_ln3003_fu_318_p2 = (zext_ln2952_fu_225_p1 + 6'd16);

assign and_ln2991_fu_272_p2 = (xor_ln2989_fu_267_p2 & icmp_ln2991_reg_407);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = zext_ln3002_1_fu_357_p1;

assign ap_return_1 = zext_ln3003_fu_361_p1;

assign block_1_fu_242_p3 = ((icmp_ln2970_reg_386[0:0] == 1'b1) ? select_ln2973_fu_235_p3 : 4'd0);

assign block_fu_228_p3 = ((icmp_ln2976_reg_391[0:0] == 1'b1) ? 4'd8 : 4'd12);

assign icmp_ln2970_fu_131_p2 = ((trunc_ln_fu_101_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln2973_fu_157_p2 = ((or_ln2973_fu_151_p2 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln2976_fu_137_p2 = ((x3_fu_121_p4 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln2991_fu_197_p2 = ((tmp_4_fu_187_p4 != 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln2993_fu_213_p2 = ((tmp_5_fu_203_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln2995_fu_219_p2 = ((x_sel_fu_171_p3 != 4'd0) ? 1'b1 : 1'b0);

assign index_fu_342_p4 = {{shl_ln3000_fu_336_p2[14:5]}};

assign or_ln2973_fu_151_p2 = (x2_fu_111_p4 | trunc_ln_fu_101_p4);

assign or_ln2991_fu_285_p2 = (tmp_reg_401 | and_ln2991_fu_272_p2);

assign pos_1_fu_290_p3 = ((or_ln2991_fu_285_p2[0:0] == 1'b1) ? select_ln2991_fu_277_p3 : pos_fu_260_p3);

assign pos_fu_260_p3 = ((icmp_ln2995_reg_417[0:0] == 1'b1) ? select_ln2993_fu_253_p3 : 3'd0);

assign select_ln2973_1_fu_163_p3 = ((icmp_ln2973_fu_157_p2[0:0] == 1'b1) ? x_sel_2_fu_143_p3 : x2_fu_111_p4);

assign select_ln2973_fu_235_p3 = ((icmp_ln2973_reg_396[0:0] == 1'b1) ? block_fu_228_p3 : 4'd4);

assign select_ln2991_fu_277_p3 = ((and_ln2991_fu_272_p2[0:0] == 1'b1) ? 3'd2 : 3'd1);

assign select_ln2993_fu_253_p3 = ((icmp_ln2993_reg_412[0:0] == 1'b1) ? 3'd3 : 3'd4);

assign sext_ln3000_fu_333_p1 = $signed(add_ln3000_reg_422);

assign shl_ln3000_fu_336_p2 = zext_ln2962_fu_330_p1 << sext_ln3000_fu_333_p1;

assign sub_ln3003_fu_324_p2 = (add_ln3003_fu_318_p2 - zext_ln2956_fu_308_p1);

assign tmp_4_fu_187_p4 = {{x_sel_fu_171_p3[3:2]}};

assign tmp_5_fu_203_p4 = {{x_sel_fu_171_p3[3:1]}};

assign trunc_ln_fu_101_p4 = {{x[15:12]}};

assign x2_fu_111_p4 = {{x[11:8]}};

assign x3_fu_121_p4 = {{x[7:4]}};

assign x4_fu_97_p1 = x[3:0];

assign x_sel_2_fu_143_p3 = ((icmp_ln2976_fu_137_p2[0:0] == 1'b1) ? x3_fu_121_p4 : x4_fu_97_p1);

assign x_sel_fu_171_p3 = ((icmp_ln2970_fu_131_p2[0:0] == 1'b1) ? select_ln2973_1_fu_163_p3 : trunc_ln_fu_101_p4);

assign xf_cv_division_lut_address0 = zext_ln3002_fu_352_p1;

assign xor_ln2989_fu_267_p2 = (tmp_reg_401 ^ 1'd1);

assign zext_ln2952_fu_225_p1 = M_read_reg_376;

assign zext_ln2956_fu_308_p1 = B_L_fu_302_p2;

assign zext_ln2959_fu_298_p1 = pos_1_fu_290_p3;

assign zext_ln2962_fu_330_p1 = x_read_reg_381_pp0_iter1_reg;

assign zext_ln2969_fu_249_p1 = block_1_fu_242_p3;

assign zext_ln3002_1_fu_357_p1 = xf_cv_division_lut_q0;

assign zext_ln3002_fu_352_p1 = index_fu_342_p4;

assign zext_ln3003_fu_361_p1 = sub_ln3003_reg_427_pp0_iter2_reg;

endmodule //Otsu_Inverse
