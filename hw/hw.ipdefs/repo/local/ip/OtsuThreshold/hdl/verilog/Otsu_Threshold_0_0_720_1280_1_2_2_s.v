// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module Otsu_Threshold_0_0_720_1280_1_2_2_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        img1a_data_dout,
        img1a_data_num_data_valid,
        img1a_data_fifo_cap,
        img1a_data_empty_n,
        img1a_data_read,
        img2_data_din,
        img2_data_num_data_valid,
        img2_data_fifo_cap,
        img2_data_full_n,
        img2_data_write,
        p_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] img1a_data_dout;
input  [1:0] img1a_data_num_data_valid;
input  [1:0] img1a_data_fifo_cap;
input   img1a_data_empty_n;
output   img1a_data_read;
output  [7:0] img2_data_din;
input  [1:0] img2_data_num_data_valid;
input  [1:0] img2_data_fifo_cap;
input   img2_data_full_n;
output   img2_data_write;
input  [7:0] p_read;

reg ap_done;
reg ap_idle;
reg start_write;
reg img1a_data_read;
reg img2_data_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    ap_block_state1;
wire    grp_Threshold_0_0_720_1280_1_2_2_Pipeline_colLoop_fu_48_ap_start;
wire    grp_Threshold_0_0_720_1280_1_2_2_Pipeline_colLoop_fu_48_ap_done;
wire    grp_Threshold_0_0_720_1280_1_2_2_Pipeline_colLoop_fu_48_ap_idle;
wire    grp_Threshold_0_0_720_1280_1_2_2_Pipeline_colLoop_fu_48_ap_ready;
wire    grp_Threshold_0_0_720_1280_1_2_2_Pipeline_colLoop_fu_48_img1a_data_read;
wire   [7:0] grp_Threshold_0_0_720_1280_1_2_2_Pipeline_colLoop_fu_48_img2_data_din;
wire    grp_Threshold_0_0_720_1280_1_2_2_Pipeline_colLoop_fu_48_img2_data_write;
reg    grp_Threshold_0_0_720_1280_1_2_2_Pipeline_colLoop_fu_48_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln64_fu_65_p2;
wire    ap_CS_fsm_state3;
reg   [9:0] i_fu_38;
wire   [9:0] i_11_fu_71_p2;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_Threshold_0_0_720_1280_1_2_2_Pipeline_colLoop_fu_48_ap_start_reg = 1'b0;
end

Otsu_Threshold_0_0_720_1280_1_2_2_Pipeline_colLoop grp_Threshold_0_0_720_1280_1_2_2_Pipeline_colLoop_fu_48(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Threshold_0_0_720_1280_1_2_2_Pipeline_colLoop_fu_48_ap_start),
    .ap_done(grp_Threshold_0_0_720_1280_1_2_2_Pipeline_colLoop_fu_48_ap_done),
    .ap_idle(grp_Threshold_0_0_720_1280_1_2_2_Pipeline_colLoop_fu_48_ap_idle),
    .ap_ready(grp_Threshold_0_0_720_1280_1_2_2_Pipeline_colLoop_fu_48_ap_ready),
    .img1a_data_dout(img1a_data_dout),
    .img1a_data_num_data_valid(2'd0),
    .img1a_data_fifo_cap(2'd0),
    .img1a_data_empty_n(img1a_data_empty_n),
    .img1a_data_read(grp_Threshold_0_0_720_1280_1_2_2_Pipeline_colLoop_fu_48_img1a_data_read),
    .img2_data_din(grp_Threshold_0_0_720_1280_1_2_2_Pipeline_colLoop_fu_48_img2_data_din),
    .img2_data_num_data_valid(2'd0),
    .img2_data_fifo_cap(2'd0),
    .img2_data_full_n(img2_data_full_n),
    .img2_data_write(grp_Threshold_0_0_720_1280_1_2_2_Pipeline_colLoop_fu_48_img2_data_write),
    .p_read(p_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln64_fu_65_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Threshold_0_0_720_1280_1_2_2_Pipeline_colLoop_fu_48_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln64_fu_65_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_Threshold_0_0_720_1280_1_2_2_Pipeline_colLoop_fu_48_ap_start_reg <= 1'b1;
        end else if ((grp_Threshold_0_0_720_1280_1_2_2_Pipeline_colLoop_fu_48_ap_ready == 1'b1)) begin
            grp_Threshold_0_0_720_1280_1_2_2_Pipeline_colLoop_fu_48_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_38 <= 10'd0;
    end else if (((icmp_ln64_fu_65_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_38 <= i_11_fu_71_p2;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_Threshold_0_0_720_1280_1_2_2_Pipeline_colLoop_fu_48_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_65_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        img1a_data_read = grp_Threshold_0_0_720_1280_1_2_2_Pipeline_colLoop_fu_48_img1a_data_read;
    end else begin
        img1a_data_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        img2_data_write = grp_Threshold_0_0_720_1280_1_2_2_Pipeline_colLoop_fu_48_img2_data_write;
    end else begin
        img2_data_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_65_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln64_fu_65_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_Threshold_0_0_720_1280_1_2_2_Pipeline_colLoop_fu_48_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign grp_Threshold_0_0_720_1280_1_2_2_Pipeline_colLoop_fu_48_ap_start = grp_Threshold_0_0_720_1280_1_2_2_Pipeline_colLoop_fu_48_ap_start_reg;

assign i_11_fu_71_p2 = (i_fu_38 + 10'd1);

assign icmp_ln64_fu_65_p2 = ((i_fu_38 == 10'd720) ? 1'b1 : 1'b0);

assign img2_data_din = grp_Threshold_0_0_720_1280_1_2_2_Pipeline_colLoop_fu_48_img2_data_din;

assign start_out = real_start;

endmodule //Otsu_Threshold_0_0_720_1280_1_2_2_s
