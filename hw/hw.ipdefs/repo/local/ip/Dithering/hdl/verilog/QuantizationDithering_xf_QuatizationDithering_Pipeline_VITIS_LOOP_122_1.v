// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module QuantizationDithering_xf_QuatizationDithering_Pipeline_VITIS_LOOP_122_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        width,
        offset_buffer_2_address0,
        offset_buffer_2_ce0,
        offset_buffer_2_we0,
        offset_buffer_2_d0,
        offset_buffer_1_address0,
        offset_buffer_1_ce0,
        offset_buffer_1_we0,
        offset_buffer_1_d0,
        offset_buffer_address0,
        offset_buffer_ce0,
        offset_buffer_we0,
        offset_buffer_d0
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [10:0] width;
output  [10:0] offset_buffer_2_address0;
output   offset_buffer_2_ce0;
output   offset_buffer_2_we0;
output  [6:0] offset_buffer_2_d0;
output  [10:0] offset_buffer_1_address0;
output   offset_buffer_1_ce0;
output   offset_buffer_1_we0;
output  [6:0] offset_buffer_1_d0;
output  [10:0] offset_buffer_address0;
output   offset_buffer_ce0;
output   offset_buffer_we0;
output  [6:0] offset_buffer_d0;

reg ap_idle;
reg offset_buffer_2_ce0;
reg offset_buffer_2_we0;
reg offset_buffer_1_ce0;
reg offset_buffer_1_we0;
reg offset_buffer_ce0;
reg offset_buffer_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln122_fu_94_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln122_fu_106_p1;
reg   [10:0] col_index_fu_34;
wire   [10:0] add_ln122_fu_100_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_col_index_1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

QuantizationDithering_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln122_fu_94_p2 == 1'd0)) begin
            col_index_fu_34 <= add_ln122_fu_100_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            col_index_fu_34 <= 11'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln122_fu_94_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_col_index_1 = 11'd0;
    end else begin
        ap_sig_allocacmp_col_index_1 = col_index_fu_34;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        offset_buffer_1_ce0 = 1'b1;
    end else begin
        offset_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln122_fu_94_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        offset_buffer_1_we0 = 1'b1;
    end else begin
        offset_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        offset_buffer_2_ce0 = 1'b1;
    end else begin
        offset_buffer_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln122_fu_94_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        offset_buffer_2_we0 = 1'b1;
    end else begin
        offset_buffer_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        offset_buffer_ce0 = 1'b1;
    end else begin
        offset_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln122_fu_94_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        offset_buffer_we0 = 1'b1;
    end else begin
        offset_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln122_fu_100_p2 = (ap_sig_allocacmp_col_index_1 + 11'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln122_fu_94_p2 = ((ap_sig_allocacmp_col_index_1 == width) ? 1'b1 : 1'b0);

assign offset_buffer_1_address0 = zext_ln122_fu_106_p1;

assign offset_buffer_1_d0 = 7'd0;

assign offset_buffer_2_address0 = zext_ln122_fu_106_p1;

assign offset_buffer_2_d0 = 7'd0;

assign offset_buffer_address0 = zext_ln122_fu_106_p1;

assign offset_buffer_d0 = 7'd0;

assign zext_ln122_fu_106_p1 = ap_sig_allocacmp_col_index_1;

endmodule //QuantizationDithering_xf_QuatizationDithering_Pipeline_VITIS_LOOP_122_1
